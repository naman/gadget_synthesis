


Gadgets
=======


0x0000000000404954: adc byte ptr [r8 - 0x77], r9b; call 0xffffffffe045d6aa; call 0x4820; add rsp, 0xf0; pop rbp; ret; 
0x0000000000404955: adc byte ptr [rax - 0x77], cl; call 0xffffffffe045d6aa; call 0x4820; add rsp, 0xf0; pop rbp; ret; 
0x0000000000404b77: adc byte ptr [rax - 0x77], cl; jge 0x4b74; call 0x49f0; add rsp, 0x10; pop rbp; ret; 
0x0000000000403f6c: adc byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x0000000000407a95: adc byte ptr [rax], al; add byte ptr [rbp - 1], bh; jmp rsp; 
0x00000000004031ce: adc byte ptr [rax], cl; mov eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000408277: adc byte ptr [rsi + 0x60d4302], al; add byte ptr [rax], al; add byte ptr [rax], bl; add byte ptr [rax], al; add byte ptr [rax - 0x27fffff9], ah; ret 0xffff; 
0x00000000004049db: adc dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x0000000000402d8c: adc dword ptr [rdi], eax; mov qword ptr [rdi + 0x10], 0; pop rbp; ret; 
0x000000000040425a: adc dword ptr [rdi], eax; mov rax, rdi; add rsp, 0x40; pop rbp; ret; 
0x00000000004018ed: adc eax, 0x207a1e; mov esi, 0x40703e; xor eax, eax; call 0x1570; pop rbp; ret; 
0x0000000000407ea7: add ah, al; add eax, dword ptr [rax]; add byte ptr [rax + rsi*4 - 1], dl; call qword ptr [rbx]; 
0x000000000040826b: add ah, dl; ret 0xffff; 
0x0000000000405b9c: add al, 0x31; sal byte ptr [rcx + rax], 0x5d; ret; 
0x0000000000401ed3: add al, 0x48; mov eax, dword ptr [rbp - 8]; add rsp, 0x20; pop rbp; ret; 
0x0000000000403207: add al, 0x8b; cld; pop rbp; ret; 
0x0000000000402d0f: add al, 0xc6; inc dword ptr [r9]; mov al, byte ptr [rbp - 1]; add rsp, 0x10; pop rbp; ret; 
0x000000000040824f: add al, al; ret 0xffff; 
0x0000000000408287: add al, bl; ret 0xffff; 
0x0000000000403f6a: add al, ch; adc byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x00000000004043c0: add al, ch; mov edx, 0x48ffffff; add esp, 0x10; pop rbp; ret; 
0x0000000000402277: add al, ch; ret; 
0x000000000040867f: add al, dh; sar edi, cl; jmp qword ptr [rcx]; 
0x0000000000402aa1: add bl, ch; mov esp, 0xf0458b48; pop rbp; ret; 
0x000000000040173f: add bl, dh; ret; 
0x000000000040824b: add byte ptr [rax + 7], ch; add byte ptr [rax], al; rol dl, 0xff; jmp qword ptr [rsi]; 
0x0000000000407eab: add byte ptr [rax + rsi*4 - 1], dl; call qword ptr [rbx]; 
0x0000000000408283: add byte ptr [rax - 0x27fffff9], ah; ret 0xffff; 
0x00000000004054f1: add byte ptr [rax - 0x75], cl; call 0x18c4d842; pop rbx; pop rbp; ret; 
0x0000000000404ac3: add byte ptr [rax - 0x75], cl; call 0x20c4ce14; pop rbp; ret; 
0x000000000040291a: add byte ptr [rax - 0x75], cl; call 0x30c4ac6b; pop rbp; ret; 
0x00000000004030bb: add byte ptr [rax - 0x77], cl; add eax, 0x2061e5; add rsp, 0x20; pop rbp; ret; 
0x00000000004026d6: add byte ptr [rax - 0x77], cl; ret 0xf1e8; 
0x0000000000401352: add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x000000000040867b: add byte ptr [rax - 0xffffff5], bl; sar edi, cl; jmp qword ptr [rcx]; 
0x0000000000407ea5: add byte ptr [rax], al; add ah, al; add eax, dword ptr [rax]; add byte ptr [rax + rsi*4 - 1], dl; call qword ptr [rbx]; 
0x00000000004043be: add byte ptr [rax], al; add al, ch; mov edx, 0x48ffffff; add esp, 0x10; pop rbp; ret; 
0x0000000000405ced: add byte ptr [rax], al; add bl, dh; ret; 
0x0000000000408249: add byte ptr [rax], al; add byte ptr [rax + 7], ch; add byte ptr [rax], al; rol dl, 0xff; jmp qword ptr [rsi]; 
0x0000000000408281: add byte ptr [rax], al; add byte ptr [rax - 0x27fffff9], ah; ret 0xffff; 
0x0000000000404ac1: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; call 0x20c4ce14; pop rbp; ret; 
0x0000000000402918: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; call 0x30c4ac6b; pop rbp; ret; 
0x00000000004026d4: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xf1e8; 
0x0000000000408679: add byte ptr [rax], al; add byte ptr [rax - 0xffffff5], bl; sar edi, cl; jmp qword ptr [rcx]; 
0x0000000000405ceb: add byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; ret; 
0x00000000004058ca: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rbp - 0x14]; add rsp, 0x30; pop rbp; ret; 
0x00000000004059fa: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rbp - 4]; add rsp, 0x30; pop rbp; ret; 
0x000000000040542f: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rbp - 8]; add rsp, 0x10; pop rbp; ret; 
0x00000000004053ac: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rbp - 8]; add rsp, 0x30; pop rbp; ret; 
0x0000000000402f86: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rbp - 8]; add rsp, 0x50; pop rbp; ret; 
0x0000000000405126: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000404ac0: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rbp - 0x18]; add rsp, 0x20; pop rbp; ret; 
0x0000000000402917: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rbp - 0x18]; add rsp, 0x30; pop rbp; ret; 
0x0000000000402d92: add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x00000000004060f4: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x401c; 
0x000000000040827d: add byte ptr [rax], al; add byte ptr [rax], bl; add byte ptr [rax], al; add byte ptr [rax - 0x27fffff9], ah; ret 0xffff; 
0x0000000000408621: add byte ptr [rax], al; add byte ptr [rax], bl; add byte ptr [rax], al; add byte ptr [rbx + rcx], al; add byte ptr [rbx + rdx*8 - 1], dh; jmp qword ptr [rdi]; 
0x0000000000405811: add byte ptr [rax], al; add byte ptr [rbx + 0x41], bl; pop rsi; pop rbp; ret; 
0x0000000000408625: add byte ptr [rax], al; add byte ptr [rbx + rcx], al; add byte ptr [rbx + rdx*8 - 1], dh; jmp qword ptr [rdi]; 
0x0000000000402db8: add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x0000000000403d9f: add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x0000000000402804: add byte ptr [rax], al; call 0x15c0; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000402587: add byte ptr [rax], al; call 0x1800; pop rbp; ret; 
0x0000000000402db3: add byte ptr [rax], al; call 0x2dc0; add rsp, 0x10; pop rbp; ret; 
0x00000000004043e3: add byte ptr [rax], al; call 0x4310; add rsp, 0x10; pop rbp; ret; 
0x00000000004043bf: add byte ptr [rax], al; call 0x4380; add rsp, 0x10; pop rbp; ret; 
0x0000000000404ba3: add byte ptr [rax], al; call 0x4ae0; add rsp, 0x10; pop rbp; ret; 
0x000000000040528b: add byte ptr [rax], al; call 0x52a0; add rsp, 0x10; pop rbp; ret; 
0x000000000040867a: add byte ptr [rax], al; cwde; or eax, dword ptr [rax]; add al, dh; sar edi, cl; jmp qword ptr [rcx]; 
0x00000000004077be: add byte ptr [rax], al; insb byte ptr [rdi], dx; mov ah, 0xff; jmp rax; 
0x00000000004058cc: add byte ptr [rax], al; mov eax, dword ptr [rbp - 0x14]; add rsp, 0x30; pop rbp; ret; 
0x00000000004059fc: add byte ptr [rax], al; mov eax, dword ptr [rbp - 4]; add rsp, 0x30; pop rbp; ret; 
0x0000000000405431: add byte ptr [rax], al; mov eax, dword ptr [rbp - 8]; add rsp, 0x10; pop rbp; ret; 
0x0000000000404cf4: add byte ptr [rax], al; mov eax, dword ptr [rbp - 8]; add rsp, 0x30; pop rbp; ret; 
0x0000000000402f88: add byte ptr [rax], al; mov eax, dword ptr [rbp - 8]; add rsp, 0x50; pop rbp; ret; 
0x0000000000405128: add byte ptr [rax], al; mov eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000404ac2: add byte ptr [rax], al; mov rax, qword ptr [rbp - 0x18]; add rsp, 0x20; pop rbp; ret; 
0x0000000000402919: add byte ptr [rax], al; mov rax, qword ptr [rbp - 0x18]; add rsp, 0x30; pop rbp; ret; 
0x0000000000408626: add byte ptr [rax], al; or r8d, dword ptr [rax]; add byte ptr [rbx + rdx*8 - 1], dh; jmp qword ptr [rdi]; 
0x0000000000401776: add byte ptr [rax], al; pop rbp; ret; 
0x0000000000405812: add byte ptr [rax], al; pop rbx; pop r14; pop rbp; ret; 
0x000000000040824a: add byte ptr [rax], al; push -0x3ffffff9; ret 0xffff; 
0x0000000000407eaa: add byte ptr [rax], al; push rsp; mov al, 0xff; call qword ptr [rbx]; 
0x00000000004077de: add byte ptr [rax], al; pushfq; mov dh, 0xff; call qword ptr [rax + 7]; 
0x000000000040837e: add byte ptr [rax], al; pushfq; or byte ptr [rax], al; add byte ptr [rdi + rax*8 - 1], bl; call qword ptr [rax]; 
0x0000000000408232: add byte ptr [rax], al; pushfq; ret 0xffff; 
0x00000000004060f6: add byte ptr [rax], al; ret 0x401c; 
0x000000000040808e: add byte ptr [rax], al; rol al, 0xff; jmp qword ptr [rbx]; 
0x00000000004081a2: add byte ptr [rax], al; rol byte ptr [rsi], 0; add byte ptr [rax], cl; ret 0xffff; 
0x000000000040824e: add byte ptr [rax], al; rol dl, 0xff; jmp qword ptr [rsi]; 
0x0000000000408622: add byte ptr [rax], al; sbb byte ptr [rax], al; add byte ptr [rax], al; or r8d, dword ptr [rax]; add byte ptr [rbx + rdx*8 - 1], dh; jmp qword ptr [rdi]; 
0x0000000000408246: add byte ptr [rax], al; sbb byte ptr [rax], al; add byte ptr [rax], al; push -0x3ffffff9; ret 0xffff; 
0x000000000040819e: add byte ptr [rax], al; sbb byte ptr [rax], al; add byte ptr [rax], al; rol byte ptr [rsi], 0; add byte ptr [rax], cl; ret 0xffff; 
0x0000000000405d0e: add byte ptr [rax], al; sub rsp, 8; add rsp, 8; ret; 
0x000000000040808a: add byte ptr [rax], al; test al, 5; add byte ptr [rax], al; rol al, 0xff; jmp qword ptr [rbx]; 
0x0000000000401764: add byte ptr [rax], al; test rax, rax; je 0x1778; pop rbp; mov edi, 0x609268; jmp rax; 
0x00000000004017a6: add byte ptr [rax], al; test rax, rax; je 0x17b8; pop rbp; mov edi, 0x609268; jmp rax; 
0x0000000000407ea3: add byte ptr [rax], bl; add byte ptr [rax], al; add ah, al; add eax, dword ptr [rax]; add byte ptr [rax + rsi*4 - 1], dl; call qword ptr [rbx]; 
0x0000000000408247: add byte ptr [rax], bl; add byte ptr [rax], al; add byte ptr [rax + 7], ch; add byte ptr [rax], al; rol dl, 0xff; jmp qword ptr [rsi]; 
0x000000000040827f: add byte ptr [rax], bl; add byte ptr [rax], al; add byte ptr [rax - 0x27fffff9], ah; ret 0xffff; 
0x0000000000408623: add byte ptr [rax], bl; add byte ptr [rax], al; add byte ptr [rbx + rcx], al; add byte ptr [rbx + rdx*8 - 1], dh; jmp qword ptr [rdi]; 
0x00000000004081a7: add byte ptr [rax], cl; ret 0xffff; 
0x00000000004081df: add byte ptr [rax], dl; ret 0xffff; 
0x0000000000401775: add byte ptr [rax], r8b; pop rbp; ret; 
0x00000000004029a4: add byte ptr [rbp + 0x486775c0], al; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000404a0e: add byte ptr [rbp + 0xa], dh; mov rax, qword ptr [rbp - 8]; add rsp, 0x10; pop rbp; ret; 
0x0000000000408003: add byte ptr [rbp + rdi*4 - 1], bh; jmp qword ptr [rdi]; 
0x0000000000407a97: add byte ptr [rbp - 1], bh; jmp rsp; 
0x0000000000407a8f: add byte ptr [rbp - 1], bl; dec eax; adc byte ptr [rax], al; add byte ptr [rbp - 1], bh; jmp rsp; 
0x0000000000405813: add byte ptr [rbx + 0x41], bl; pop rsi; pop rbp; ret; 
0x0000000000403ccf: add byte ptr [rbx + 0x41], bl; pop rsp; pop r14; pop r15; pop rbp; ret; 
0x0000000000408627: add byte ptr [rbx + rcx], al; add byte ptr [rbx + rdx*8 - 1], dh; jmp qword ptr [rdi]; 
0x000000000040862b: add byte ptr [rbx + rdx*8 - 1], dh; jmp qword ptr [rdi]; 
0x0000000000402564: add byte ptr [rcx], al; jne 0x2518; add rsp, 0x20; pop rbp; ret; 
0x00000000004017d7: add byte ptr [rcx], al; pop rbp; ret; 
0x00000000004019af: add byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0xce; call 0x1480; add rsp, 0x10; pop rbp; ret; 
0x00000000004019ae: add byte ptr [rcx], sil; ror byte ptr [rax - 0x77], 0xce; call 0x1480; add rsp, 0x10; pop rbp; ret; 
0x00000000004049a1: add byte ptr [rdi + 0x406f74], bh; call 0x1530; pop rbp; ret; 
0x0000000000408383: add byte ptr [rdi + rax*8 - 1], bl; call qword ptr [rax]; 
0x0000000000402cba: add byte ptr [rdi + rdx*8 + 0x48], dh; mov eax, dword ptr [rbp - 0x18]; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000405a21: add byte ptr [rdi], cl; pushfq; shr bl, 2; xor eax, eax; pop rbp; ret; 
0x0000000000402d66: add byte ptr [rdx + 0x124ff45], cl; add rsp, 0x20; pop rbp; ret; 
0x00000000004018f1: add byte ptr [rsi + 0x40703e], bh; xor eax, eax; call 0x1570; pop rbp; ret; 
0x00000000004077bf: add byte ptr [rsp + rsi*4 - 1], ch; jmp rax; 
0x0000000000403e87: add dword ptr [rax - 0x75], ecx; ror byte ptr [r8 - 0x7d], 0xc4; pop rax; pop rbx; pop rbp; ret; 
0x0000000000404c65: add dword ptr [rax - 0x77], ecx; fucomip st(0); movabs byte ptr [0x5b08c48348ffffff], al; pop rbp; ret; 
0x0000000000405755: add dword ptr [rax - 0x7d], ecx; ret 0x4802; 
0x0000000000403f3b: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x0000000000402585: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x1800; pop rbp; ret; 
0x0000000000404ba1: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x4ae0; add rsp, 0x10; pop rbp; ret; 
0x0000000000405289: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x52a0; add rsp, 0x10; pop rbp; ret; 
0x0000000000402565: add dword ptr [rbp - 0x50], esi; add rsp, 0x20; pop rbp; ret; 
0x0000000000405aa8: add dword ptr [rbx + 0x77420ff], eax; cmp dword ptr [rbp - 4], 9; sete al; pop rbp; ret; 
0x0000000000405c75: add eax, -0x20; pop rbp; ret; 
0x0000000000404de6: add eax, -1; call 0x4d00; mov eax, dword ptr [rbp - 8]; add rsp, 0x30; pop rbp; ret; 
0x00000000004030be: add eax, 0x2061e5; add rsp, 0x20; pop rbp; ret; 
0x00000000004030b7: add eax, 0x206254; mov qword ptr [rip + 0x2061e5], rax; add rsp, 0x20; pop rbp; ret; 
0x0000000000402560: add eax, 0x206d8a; add dword ptr [rbp - 0x50], esi; add rsp, 0x20; pop rbp; ret; 
0x000000000040134e: add eax, 0x207ca5; test rax, rax; je 0x135a; call rax; 
0x000000000040134e: add eax, 0x207ca5; test rax, rax; je 0x135a; call rax; add rsp, 8; ret; 
0x0000000000405c55: add eax, 0x20; pop rbp; ret; 
0x0000000000403013: add eax, 0xffffffb8; jg 0x3062; add esp, 0x20; pop rbp; ret; 
0x0000000000407ea9: add eax, dword ptr [rax]; add byte ptr [rax + rsi*4 - 1], dl; call qword ptr [rbx]; 
0x000000000040241a: add eax, dword ptr [rcx + 0x10]; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000004019bb: add esp, 0x10; pop rbp; ret; 
0x0000000000403126: add esp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000401ed9: add esp, 0x20; pop rbp; ret; 
0x0000000000402705: add esp, 0x20; pop rbx; pop r14; pop rbp; ret; 
0x0000000000404d95: add esp, 0x28; pop rbx; pop r14; pop r15; pop rbp; ret; 
0x000000000040241e: add esp, 0x28; pop rbx; pop rbp; ret; 
0x00000000004024eb: add esp, 0x30; pop rbp; ret; 
0x0000000000402896: add esp, 0x40; pop rbp; ret; 
0x0000000000402693: add esp, 0x50; pop rbp; ret; 
0x00000000004032ef: add esp, 0x58; pop rbx; pop rbp; ret; 
0x000000000040479e: add esp, 0x60; pop rbp; ret; 
0x0000000000404488: add esp, 0x68; pop rbx; pop rbp; ret; 
0x00000000004050bd: add esp, 0x70; pop rbp; ret; 
0x0000000000404134: add esp, 0x78; pop rbx; pop rbp; ret; 
0x00000000004048d0: add esp, 0x80; pop rbp; ret; 
0x00000000004022c1: add esp, 0xb0; pop rbp; ret; 
0x0000000000404964: add esp, 0xf0; pop rbp; ret; 
0x000000000040580e: add esp, 0xf0; pop rbx; pop r14; pop rbp; ret; 
0x00000000004029aa: add esp, 8; pop rbx; pop rbp; ret; 
0x000000000040135b: add esp, 8; ret; 
0x0000000000404de5: add r8, -1; call 0x4d00; mov eax, dword ptr [rbp - 8]; add rsp, 0x30; pop rbp; ret; 
0x0000000000402419: add rax, qword ptr [rcx + 0x10]; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000004019ba: add rsp, 0x10; pop rbp; ret; 
0x0000000000403125: add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000401ed8: add rsp, 0x20; pop rbp; ret; 
0x0000000000402704: add rsp, 0x20; pop rbx; pop r14; pop rbp; ret; 
0x0000000000404d94: add rsp, 0x28; pop rbx; pop r14; pop r15; pop rbp; ret; 
0x000000000040241d: add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000004024ea: add rsp, 0x30; pop rbp; ret; 
0x0000000000402895: add rsp, 0x40; pop rbp; ret; 
0x0000000000402692: add rsp, 0x50; pop rbp; ret; 
0x00000000004032ee: add rsp, 0x58; pop rbx; pop rbp; ret; 
0x000000000040479d: add rsp, 0x60; pop rbp; ret; 
0x0000000000404487: add rsp, 0x68; pop rbx; pop rbp; ret; 
0x00000000004050bc: add rsp, 0x70; pop rbp; ret; 
0x0000000000404133: add rsp, 0x78; pop rbx; pop rbp; ret; 
0x00000000004048cf: add rsp, 0x80; pop rbp; ret; 
0x00000000004022c0: add rsp, 0xb0; pop rbp; ret; 
0x0000000000404963: add rsp, 0xf0; pop rbp; ret; 
0x000000000040580d: add rsp, 0xf0; pop rbx; pop r14; pop rbp; ret; 
0x00000000004029a9: add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000040135a: add rsp, 8; ret; 
0x0000000000402d6a: and al, 1; add rsp, 0x20; pop rbp; ret; 
0x0000000000403f39: and byte ptr [rax], al; add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x0000000000402563: and byte ptr [rax], al; add dword ptr [rbp - 0x50], esi; add rsp, 0x20; pop rbp; ret; 
0x00000000004030c1: and byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x00000000004049a0: and byte ptr [rax], al; mov edi, 0x406f74; call 0x1530; pop rbp; ret; 
0x00000000004018f0: and byte ptr [rax], al; mov esi, 0x40703e; xor eax, eax; call 0x1570; pop rbp; ret; 
0x00000000004030ba: and byte ptr [rax], al; mov qword ptr [rip + 0x2061e5], rax; add rsp, 0x20; pop rbp; ret; 
0x000000000040293d: and byte ptr [rax], al; pop rbp; ret; 
0x0000000000401351: and byte ptr [rax], al; test rax, rax; je 0x135a; call rax; 
0x0000000000401351: and byte ptr [rax], al; test rax, rax; je 0x135a; call rax; add rsp, 8; ret; 
0x0000000000402707: and byte ptr [rbx + 0x41], bl; pop rsi; pop rbp; ret; 
0x000000000040311b: and edx, 0x1889ffff; mov rax, qword ptr [rbp - 0x20]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004031c7: and esi, 1; shl esi, cl; xor dword ptr [rax + rdx + 8], esi; mov eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000402ef0: call 0x1380; add rsp, 0x10; pop rbp; ret; 
0x00000000004022bb: call 0x1380; add rsp, 0xb0; pop rbp; ret; 
0x0000000000404ab7: call 0x1380; mov qword ptr [rbp - 0x18], 0; mov rax, qword ptr [rbp - 0x18]; add rsp, 0x20; pop rbp; ret; 
0x00000000004022af: call 0x1380; mov rdi, qword ptr [rbp - 0x88]; call 0x1380; add rsp, 0xb0; pop rbp; ret; 
0x00000000004019b5: call 0x1480; add rsp, 0x10; pop rbp; ret; 
0x0000000000404996: call 0x1480; mov rsi, qword ptr [rip + 0x2048e6]; mov edi, 0x406f74; call 0x1530; pop rbp; ret; 
0x0000000000404bcb: call 0x14d0; mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000402b36: call 0x1510; mov dword ptr [rbp - 4], eax; add rsp, 0x20; pop rbp; ret; 
0x00000000004049a7: call 0x1530; pop rbp; ret; 
0x0000000000404798: call 0x1570; add rsp, 0x60; pop rbp; ret; 
0x00000000004018f9: call 0x1570; pop rbp; ret; 
0x0000000000404c37: call 0x1590; mov rax, rbx; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000402806: call 0x15c0; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000004026ff: call 0x1670; add rsp, 0x20; pop rbx; pop r14; pop rbp; ret; 
0x00000000004017cd: call 0x1750; mov byte ptr [rip + 0x207aef], 1; pop rbp; ret; 
0x0000000000402589: call 0x1800; pop rbp; ret; 
0x00000000004054f5: call 0x18c4d842; pop rbx; pop rbp; ret; 
0x0000000000404ac7: call 0x20c4ce14; pop rbp; ret; 
0x0000000000402870: call 0x26a0; mov rdi, qword ptr [rbp - 0x30]; mov rsi, qword ptr [rbp - 0x28]; mov rdx, qword ptr [rbp - 0x20]; call 0x2710; call qword ptr [rbp - 0x18]; 
0x0000000000402881: call 0x2710; call qword ptr [rbp - 0x18]; 
0x0000000000402cc0: call 0x28c4b00d; pop rbx; pop rbp; ret; 
0x0000000000402916: call 0x291b; mov rax, qword ptr [rbp - 0x18]; add rsp, 0x30; pop rbp; ret; 
0x0000000000402b76: call 0x2b20; add rsp, 0x10; pop rbp; ret; 
0x0000000000402db5: call 0x2dc0; add rsp, 0x10; pop rbp; ret; 
0x000000000040291e: call 0x30c4ac6b; pop rbp; ret; 
0x0000000000403d9c: call 0x3db0; add rsp, 0x20; pop rbp; ret; 
0x0000000000404194: call 0x3f50; add rsp, 0x10; pop rbp; ret; 
0x0000000000403f6b: call 0x3f80; add rsp, 0x10; pop rbp; ret; 
0x0000000000404168: call 0x3f80; add rsp, 0x20; pop rbp; ret; 
0x0000000000404200: call 0x3f80; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x0000000000404482: call 0x3f80; add rsp, 0x68; pop rbx; pop rbp; ret; 
0x00000000004041be: call 0x4150; add rsp, 0x10; pop rbp; ret; 
0x00000000004042cb: call 0x41d0; add rsp, 0x10; pop rbp; ret; 
0x0000000000404305: call 0x4270; add rsp, 0x20; pop rbp; ret; 
0x000000000040439b: call 0x4310; add rsp, 0x10; pop rbp; ret; 
0x00000000004043c1: call 0x4380; add rsp, 0x10; pop rbp; ret; 
0x00000000004044b8: call 0x43f0; add rsp, 0x20; pop rbp; ret; 
0x000000000040440e: call 0x4420; add rsp, 0x20; pop rbp; ret; 
0x0000000000404554: call 0x4510; add rsp, 0x10; pop rbp; ret; 
0x000000000040480c: call 0x4560; add rsp, 0x30; pop rbp; ret; 
0x00000000004048ca: call 0x4560; add rsp, 0x80; pop rbp; ret; 
0x000000000040495e: call 0x4820; add rsp, 0xf0; pop rbp; ret; 
0x0000000000402cb9: call 0x48d7a0be; mov eax, dword ptr [rbp - 0x18]; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000004049da: call 0x49f0; add rsp, 0x10; pop rbp; ret; 
0x0000000000404a55: call 0x4a70; add rsp, 0x20; pop rbp; ret; 
0x0000000000404abf: call 0x4ac4; mov rax, qword ptr [rbp - 0x18]; add rsp, 0x20; pop rbp; ret; 
0x0000000000404ba5: call 0x4ae0; add rsp, 0x10; pop rbp; ret; 
0x0000000000404c69: call 0x4c10; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000404cf1: call 0x4d00; mov eax, dword ptr [rbp - 8]; add rsp, 0x30; pop rbp; ret; 
0x000000000040528d: call 0x52a0; add rsp, 0x10; pop rbp; ret; 
0x00000000004032ed: call 0x58c4b63a; pop rbx; pop rbp; ret; 
0x0000000000402910: call 0xffffffffc7483200; call 0x291b; mov rax, qword ptr [rbp - 0x18]; add rsp, 0x30; pop rbp; ret; 
0x0000000000404959: call 0xffffffffe045d6aa; call 0x4820; add rsp, 0xf0; pop rbp; ret; 
0x0000000000404803: call 0xfffffffff045d354; mov r9, qword ptr [rbp - 8]; call 0x4560; add rsp, 0x30; pop rbp; ret; 
0x0000000000404cec: call 0xfffffffff045d83d; call 0x4d00; mov eax, dword ptr [rbp - 8]; add rsp, 0x30; pop rbp; ret; 
0x0000000000404402: call 0xfffffffff04dcd4f; mov r8, -1; call 0x4420; add rsp, 0x20; pop rbp; ret; 
0x000000000040415e: call 0xfffffffff055caab; mov ecx, 0x609318; call 0x3f80; add rsp, 0x20; pop rbp; ret; 
0x0000000000404a4b: call 0xfffffffff075d598; imul rsi, qword ptr [rbp - 8]; call 0x4a70; add rsp, 0x20; pop rbp; ret; 
0x00000000004048c1: call 0xfffffffff84dd412; lea r8, [rbp - 0x80]; call 0x4560; add rsp, 0x80; pop rbp; ret; 
0x00000000004077e3: call qword ptr [rax + 7]; 
0x0000000000407873: call qword ptr [rax + 9]; 
0x00000000004078f3: call qword ptr [rax]; 
0x0000000000402886: call qword ptr [rbp - 0x18]; 
0x0000000000402886: call qword ptr [rbp - 0x18]; mov qword ptr [rbp - 0x10], -1; mov rax, qword ptr [rbp - 0x10]; add rsp, 0x40; pop rbp; ret; 
0x0000000000407eaf: call qword ptr [rbx]; 
0x0000000000407d27: call qword ptr [rcx]; 
0x00000000004083a3: call qword ptr [rdi]; 
0x0000000000407e23: call qword ptr [rdx]; 
0x0000000000401358: call rax; 
0x0000000000401358: call rax; add rsp, 8; ret; 
0x000000000040792b: call rsp; 
0x0000000000405125: clc; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000404a14: clc; add rsp, 0x10; pop rbp; ret; 
0x0000000000401ed7: clc; add rsp, 0x20; pop rbp; ret; 
0x0000000000403d6e: clc; add rsp, 0x30; pop rbp; ret; 
0x000000000040425e: clc; add rsp, 0x40; pop rbp; ret; 
0x0000000000402f8c: clc; add rsp, 0x50; pop rbp; ret; 
0x0000000000402b35: clc; call 0x1510; mov dword ptr [rbp - 4], eax; add rsp, 0x20; pop rbp; ret; 
0x000000000040480b: clc; call 0x4560; add rsp, 0x30; pop rbp; ret; 
0x00000000004049d9: clc; call 0x49f0; add rsp, 0x10; pop rbp; ret; 
0x0000000000404a54: clc; call 0x4a70; add rsp, 0x20; pop rbp; ret; 
0x0000000000404b5a: clc; imul rsi, qword ptr [rbp - 0x10]; call 0x4a70; add rsp, 0x20; pop rbp; ret; 
0x00000000004048c5: clc; lea r8, [rbp - 0x80]; call 0x4560; add rsp, 0x80; pop rbp; ret; 
0x0000000000403204: clc; mov dword ptr [rax + 4], ecx; mov eax, dword ptr [rbp - 4]; pop rbp; ret; 
0x00000000004043df: clc; mov edx, 0x3a; call 0x4310; add rsp, 0x10; pop rbp; ret; 
0x0000000000402daf: clc; mov edx, 0xa; call 0x2dc0; add rsp, 0x10; pop rbp; ret; 
0x0000000000404b9f: clc; mov edx, 1; call 0x4ae0; add rsp, 0x10; pop rbp; ret; 
0x00000000004043bb: clc; mov esi, 0x3a; call 0x4380; add rsp, 0x10; pop rbp; ret; 
0x000000000040325c: clc; mov qword ptr [rcx + 0x30], rax; add rsp, 0x20; pop rbp; ret; 
0x00000000004030b4: clc; mov qword ptr [rip + 0x206254], rax; mov qword ptr [rip + 0x2061e5], rax; add rsp, 0x20; pop rbp; ret; 
0x0000000000402937: clc; mov qword ptr [rip + 0x2069c1], rdi; pop rbp; ret; 
0x0000000000403d6a: clc; mov rax, qword ptr [rbp - 8]; add rsp, 0x30; pop rbp; ret; 
0x0000000000402eeb: clc; mov rdi, qword ptr [rdi + 0x10]; call 0x1380; add rsp, 0x10; pop rbp; ret; 
0x0000000000402579: clc; pop rbp; ret; 
0x0000000000401ed0: clc; push qword ptr [rsp + rax + 0x48]; mov eax, dword ptr [rbp - 8]; add rsp, 0x20; pop rbp; ret; 
0x0000000000402d87: clc; xorps xmm0, xmm0; movups xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], 0; pop rbp; ret; 
0x0000000000405c74: cld; add eax, -0x20; pop rbp; ret; 
0x0000000000405c54: cld; add eax, 0x20; pop rbp; ret; 
0x0000000000405265: cld; add rsp, 0x10; pop rbp; ret; 
0x0000000000402b3d: cld; add rsp, 0x20; pop rbp; ret; 
0x00000000004052eb: cld; add rsp, 0x30; pop rbp; ret; 
0x000000000040598a: cld; add rsp, 0x40; pop rbp; ret; 
0x0000000000405262: cld; mov eax, dword ptr [rbp - 4]; add rsp, 0x10; pop rbp; ret; 
0x00000000004052e8: cld; mov eax, dword ptr [rbp - 4]; add rsp, 0x30; pop rbp; ret; 
0x0000000000405987: cld; mov eax, dword ptr [rbp - 4]; add rsp, 0x40; pop rbp; ret; 
0x0000000000403201: cld; mov ecx, dword ptr [rbp - 8]; mov dword ptr [rax + 4], ecx; mov eax, dword ptr [rbp - 4]; pop rbp; ret; 
0x0000000000405bd8: cld; or eax, 0x5dc0940f; ret; 
0x000000000040320a: cld; pop rbp; ret; 
0x0000000000403d64: cmove ecx, eax; mov qword ptr [rbp - 8], rcx; mov rax, qword ptr [rbp - 8]; add rsp, 0x30; pop rbp; ret; 
0x0000000000403d63: cmove rcx, rax; mov qword ptr [rbp - 8], rcx; mov rax, qword ptr [rbp - 8]; add rsp, 0x30; pop rbp; ret; 
0x00000000004043e1: cmp al, byte ptr [rax]; add byte ptr [rax], al; call 0x4310; add rsp, 0x10; pop rbp; ret; 
0x00000000004043bd: cmp al, byte ptr [rax]; add byte ptr [rax], al; call 0x4380; add rsp, 0x10; pop rbp; ret; 
0x0000000000405aef: cmp cl, byte ptr [rdi]; pushfq; shr bl, 2; xor eax, eax; pop rbp; ret; 
0x0000000000404a0b: cmp dword ptr [rbp - 0x10], 0; jne 0x4a1b; mov rax, qword ptr [rbp - 8]; add rsp, 0x10; pop rbp; ret; 
0x0000000000405c6c: cmp dword ptr [rbp - 4], 0x7a; jg 0x5c7a; mov eax, dword ptr [rbp - 4]; add eax, -0x20; pop rbp; ret; 
0x0000000000405acf: cmp dword ptr [rbp - 4], 0x7f; sete al; pop rbp; ret; 
0x0000000000405bd0: cmp dword ptr [rbp - 4], 0xc; je 0x5bdd; cmp dword ptr [rbp - 4], 0xd; sete al; pop rbp; ret; 
0x0000000000405bd6: cmp dword ptr [rbp - 4], 0xd; sete al; pop rbp; ret; 
0x0000000000405aae: cmp dword ptr [rbp - 4], 9; sete al; pop rbp; ret; 
0x0000000000401ece: cmp dword ptr [rbp - 8], -1; je 0x1ed8; mov rax, qword ptr [rbp - 8]; add rsp, 0x20; pop rbp; ret; 
0x000000000040295a: cmp eax, 0x2069a9; pop rbp; ret; 
0x000000000040293a: cmp eax, 0x2069c1; pop rbp; ret; 
0x0000000000405aa9: cmp edi, 0x20; je 0x5ab5; cmp dword ptr [rbp - 4], 9; sete al; pop rbp; ret; 
0x0000000000404a0a: cmp qword ptr [rbp - 0x10], 0; jne 0x4a1b; mov rax, qword ptr [rbp - 8]; add rsp, 0x10; pop rbp; ret; 
0x0000000000401ecd: cmp qword ptr [rbp - 8], -1; je 0x1ed8; mov rax, qword ptr [rbp - 8]; add rsp, 0x20; pop rbp; ret; 
0x000000000040867c: cwde; or eax, dword ptr [rax]; add al, dh; sar edi, cl; jmp qword ptr [rcx]; 
0x0000000000404abb: dec dword ptr [rax - 0x39]; call 0x4ac4; mov rax, qword ptr [rbp - 0x18]; add rsp, 0x20; pop rbp; ret; 
0x0000000000402874: dec dword ptr [rax - 0x75]; jge 0x2849; mov rsi, qword ptr [rbp - 0x28]; mov rdx, qword ptr [rbp - 0x20]; call 0x2710; call qword ptr [rbp - 0x18]; 
0x00000000004022b3: dec dword ptr [rax - 0x75]; mov ebp, 0xffffff78; call 0x1380; add rsp, 0xb0; pop rbp; ret; 
0x000000000040499a: dec dword ptr [rax - 0x75]; xor eax, 0x2048e6; mov edi, 0x406f74; call 0x1530; pop rbp; ret; 
0x0000000000404bbe: dec dword ptr [rax - 0x77]; ret; 
0x00000000004032e7: dec dword ptr [rcx + 0x458b4818]; call 0x58c4b63a; pop rbx; pop rbp; ret; 
0x0000000000405218: dec dword ptr [rcx + 0x458be445]; in al, 0x48; add esp, 0x18; pop rbx; pop rbp; ret; 
0x000000000040525f: dec dword ptr [rcx + 0x458bfc45]; cld; add rsp, 0x10; pop rbp; ret; 
0x00000000004052e5: dec dword ptr [rcx + 0x458bfc45]; cld; add rsp, 0x30; pop rbp; ret; 
0x00000000004042c5: dec dword ptr [rcx - 0x3d76b732]; call 0x41d0; add rsp, 0x10; pop rbp; ret; 
0x0000000000407a93: dec eax; adc byte ptr [rax], al; add byte ptr [rbp - 1], bh; jmp rsp; 
0x0000000000405a54: fild word ptr [rbx - 0x63f0a408]; shr bl, 2; xor eax, eax; pop rbp; ret; 
0x0000000000405c24: fild word ptr [rbx - 0x63f0b808]; shr bl, 2; xor eax, eax; pop rbp; ret; 
0x0000000000405ccc: fmul qword ptr [rax - 0x7d]; ret; 
0x0000000000404c68: fucomip st(0); movabs byte ptr [0x5b08c48348ffffff], al; pop rbp; ret; 
0x0000000000405287: idiv byte ptr [rdx + 1]; call 0x52a0; add rsp, 0x10; pop rbp; ret; 
0x00000000004049d6: imul edi, dword ptr [rbp - 8]; call 0x49f0; add rsp, 0x10; pop rbp; ret; 
0x0000000000404b5c: imul esi, dword ptr [rbp - 0x10]; call 0x4a70; add rsp, 0x20; pop rbp; ret; 
0x0000000000404a51: imul esi, dword ptr [rbp - 8]; call 0x4a70; add rsp, 0x20; pop rbp; ret; 
0x00000000004049d5: imul rdi, qword ptr [rbp - 8]; call 0x49f0; add rsp, 0x10; pop rbp; ret; 
0x0000000000404b5b: imul rsi, qword ptr [rbp - 0x10]; call 0x4a70; add rsp, 0x20; pop rbp; ret; 
0x0000000000404a50: imul rsi, qword ptr [rbp - 8]; call 0x4a70; add rsp, 0x20; pop rbp; ret; 
0x000000000040521e: in al, 0x48; add esp, 0x18; pop rbx; pop rbp; ret; 
0x000000000040516b: in al, 0x8b; cld; add rsp, 0x20; pop rbp; ret; 
0x000000000040521b: in al, 0x8b; in al, 0x48; add esp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000407a61: in al, 0xff; jmp qword ptr [rax]; 
0x00000000004058d0: in al, dx; add rsp, 0x30; pop rbp; ret; 
0x000000000040134a: in al, dx; or byte ptr [rax - 0x75], cl; add eax, 0x207ca5; test rax, rax; je 0x135a; call rax; 
0x0000000000402953: in eax, 0x40; mov byte ptr [rbp - 1], bh; mov byte ptr [rip + 0x2069a9], dil; pop rbp; ret; 
0x0000000000402573: in eax, 0x40; mov byte ptr [rbp - 1], bh; mov eax, edi; pop rbp; ret; 
0x0000000000402933: in eax, 0x48; mov dword ptr [rbp - 8], edi; mov qword ptr [rip + 0x2069c1], rdi; pop rbp; ret; 
0x00000000004019c3: in eax, 0x5d; ret; 
0x00000000004030bf: in eax, 0x61; and byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x0000000000402583: in eax, 0xbf; add dword ptr [rax], eax; add byte ptr [rax], al; call 0x1800; pop rbp; ret; 
0x0000000000407a91: in eax, 0xff; dec eax; adc byte ptr [rax], al; add byte ptr [rbp - 1], bh; jmp rsp; 
0x0000000000407a99: in eax, 0xff; jmp rsp; 
0x0000000000402d64: inc dword ptr [r8]; mov al, byte ptr [rbp - 1]; and al, 1; add rsp, 0x20; pop rbp; ret; 
0x0000000000402d11: inc dword ptr [r9]; mov al, byte ptr [rbp - 1]; add rsp, 0x10; pop rbp; ret; 
0x0000000000402957: inc dword ptr [rax - 0x78]; cmp eax, 0x2069a9; pop rbp; ret; 
0x0000000000402d65: inc dword ptr [rax]; mov al, byte ptr [rbp - 1]; and al, 1; add rsp, 0x20; pop rbp; ret; 
0x0000000000402d12: inc dword ptr [rcx]; mov al, byte ptr [rbp - 1]; add rsp, 0x10; pop rbp; ret; 
0x00000000004077c0: insb byte ptr [rdi], dx; mov ah, 0xff; jmp rax; 
0x0000000000402562: insd dword ptr [rdi], dx; and byte ptr [rax], al; add dword ptr [rbp - 0x50], esi; add rsp, 0x20; pop rbp; ret; 
0x00000000004048a6: int 0x80; 
0x00000000004078f1: int 0xff; call qword ptr [rax]; 
0x00000000004054ef: jbe 0x5531; add byte ptr [rax - 0x75], cl; call 0x18c4d842; pop rbx; pop rbp; ret; 
0x0000000000401356: je 0x135a; call rax; 
0x0000000000401356: je 0x135a; call rax; add rsp, 8; ret; 
0x0000000000401769: je 0x1778; pop rbp; mov edi, 0x609268; jmp rax; 
0x00000000004017ab: je 0x17b8; pop rbp; mov edi, 0x609268; jmp rax; 
0x0000000000401ed2: je 0x1ed8; mov rax, qword ptr [rbp - 8]; add rsp, 0x20; pop rbp; ret; 
0x0000000000402cbb: je 0x2c94; mov rax, qword ptr [rbp - 0x18]; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000404bfc: je 0x4c08; mov rax, qword ptr [rbp - 8]; add rsp, 0x20; pop rbp; ret; 
0x0000000000405aac: je 0x5ab5; cmp dword ptr [rbp - 4], 9; sete al; pop rbp; ret; 
0x0000000000405acd: je 0x5ad8; cmp dword ptr [rbp - 4], 0x7f; sete al; pop rbp; ret; 
0x0000000000405bd4: je 0x5bdd; cmp dword ptr [rbp - 4], 0xd; sete al; pop rbp; ret; 
0x0000000000402eee: jg 0x2f00; call 0x1380; add rsp, 0x10; pop rbp; ret; 
0x0000000000403018: jg 0x3062; add esp, 0x20; pop rbp; ret; 
0x0000000000405b2f: jg 0x5b40; pushfq; shr bl, 2; xor eax, eax; pop rbp; ret; 
0x0000000000405b4f: jg 0x5b60; pushfq; shr bl, 2; xor eax, eax; pop rbp; ret; 
0x0000000000405c50: jg 0x5c5a; mov eax, dword ptr [rbp - 4]; add eax, 0x20; pop rbp; ret; 
0x0000000000405c70: jg 0x5c7a; mov eax, dword ptr [rbp - 4]; add eax, -0x20; pop rbp; ret; 
0x0000000000401ecf: jge 0x1ec9; push qword ptr [rsp + rax + 0x48]; mov eax, dword ptr [rbp - 8]; add rsp, 0x20; pop rbp; ret; 
0x0000000000402576: jge 0x2577; mov eax, edi; pop rbp; ret; 
0x0000000000402877: jge 0x2849; mov rsi, qword ptr [rbp - 0x28]; mov rdx, qword ptr [rbp - 0x20]; call 0x2710; call qword ptr [rbp - 0x18]; 
0x0000000000402936: jge 0x2930; mov qword ptr [rip + 0x2069c1], rdi; pop rbp; ret; 
0x0000000000402956: jge 0x2957; mov byte ptr [rip + 0x2069a9], dil; pop rbp; ret; 
0x0000000000402d86: jge 0x2d80; xorps xmm0, xmm0; movups xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], 0; pop rbp; ret; 
0x0000000000402eea: jge 0x2ee4; mov rdi, qword ptr [rdi + 0x10]; call 0x1380; add rsp, 0x10; pop rbp; ret; 
0x00000000004043ba: jge 0x43b4; mov esi, 0x3a; call 0x4380; add rsp, 0x10; pop rbp; ret; 
0x00000000004049d3: jge 0x49c5; imul rdi, qword ptr [rbp - 8]; call 0x49f0; add rsp, 0x10; pop rbp; ret; 
0x00000000004049d8: jge 0x49d2; call 0x49f0; add rsp, 0x10; pop rbp; ret; 
0x0000000000404a0c: jge 0x49fe; add byte ptr [rbp + 0xa], dh; mov rax, qword ptr [rbp - 8]; add rsp, 0x10; pop rbp; ret; 
0x0000000000404b7a: jge 0x4b74; call 0x49f0; add rsp, 0x10; pop rbp; ret; 
0x0000000000405bd7: jge 0x5bd5; or eax, 0x5dc0940f; ret; 
0x0000000000401350: jl 0x1372; add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x0000000000407953: jmp qword ptr [rax + 0xc]; 
0x0000000000405aaa: jmp qword ptr [rax]; 
0x0000000000407f57: jmp qword ptr [rbp]; 
0x0000000000408093: jmp qword ptr [rbx]; 
0x0000000000405b08: jmp qword ptr [rcx + 0x7c]; 
0x0000000000405b28: jmp qword ptr [rcx]; 
0x0000000000408007: jmp qword ptr [rdi]; 
0x000000000040844b: jmp qword ptr [rdx]; 
0x000000000040805b: jmp qword ptr [rsi]; 
0x0000000000401771: jmp rax; 
0x0000000000408023: jmp rbx; 
0x0000000000407733: jmp rsp; 
0x0000000000402566: jne 0x2518; add rsp, 0x20; pop rbp; ret; 
0x000000000040287b: jne 0x2855; mov rdx, qword ptr [rbp - 0x20]; call 0x2710; call qword ptr [rbp - 0x18]; 
0x00000000004029a7: jne 0x2a10; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000402b14: jne 0x2ae0; mov rax, qword ptr [rbp - 8]; add rsp, 0x20; pop rbp; ret; 
0x0000000000402dae: jne 0x2da8; mov edx, 0xa; call 0x2dc0; add rsp, 0x10; pop rbp; ret; 
0x00000000004043de: jne 0x43d8; mov edx, 0x3a; call 0x4310; add rsp, 0x10; pop rbp; ret; 
0x0000000000404a0f: jne 0x4a1b; mov rax, qword ptr [rbp - 8]; add rsp, 0x10; pop rbp; ret; 
0x0000000000404a4e: jne 0x4a40; imul rsi, qword ptr [rbp - 8]; call 0x4a70; add rsp, 0x20; pop rbp; ret; 
0x0000000000404a53: jne 0x4a4d; call 0x4a70; add rsp, 0x20; pop rbp; ret; 
0x0000000000404b5e: jne 0x4b50; call 0x4a70; add rsp, 0x20; pop rbp; ret; 
0x0000000000404b59: jne 0x4b53; imul rsi, qword ptr [rbp - 0x10]; call 0x4a70; add rsp, 0x20; pop rbp; ret; 
0x0000000000404b9e: jne 0x4b98; mov edx, 1; call 0x4ae0; add rsp, 0x10; pop rbp; ret; 
0x000000000040516a: jne 0x5150; mov eax, dword ptr [rbp - 4]; add rsp, 0x20; pop rbp; ret; 
0x0000000000405b0f: jnp 0x5b20; pushfq; shr bl, 2; xor eax, eax; pop rbp; ret; 
0x0000000000402275: jo 0x2297; add al, ch; ret; 
0x00000000004050bf: jo 0x511e; ret; 
0x00000000004017d5: jp 0x17f7; add byte ptr [rcx], al; pop rbp; ret; 
0x00000000004018ef: jp 0x1911; add byte ptr [rsi + 0x40703e], bh; xor eax, eax; call 0x1570; pop rbp; ret; 
0x0000000000404136: js 0x4193; pop rbp; ret; 
0x000000000040495b: lea eax, [rbp - 0x20]; call 0x4820; add rsp, 0xf0; pop rbp; ret; 
0x00000000004048c7: lea eax, [rbp - 0x80]; call 0x4560; add rsp, 0x80; pop rbp; ret; 
0x000000000040495a: lea r8, [rbp - 0x20]; call 0x4820; add rsp, 0xf0; pop rbp; ret; 
0x00000000004048c6: lea r8, [rbp - 0x80]; call 0x4560; add rsp, 0x80; pop rbp; ret; 
0x0000000000405810: lock add byte ptr [rax], al; add byte ptr [rbx + 0x41], bl; pop rsi; pop rbp; ret; 
0x0000000000404a0d: lock add byte ptr [rbp + 0xa], dh; mov rax, qword ptr [rbp - 8]; add rsp, 0x10; pop rbp; ret; 
0x00000000004077c1: mov ah, 0xff; jmp rax; 
0x00000000004022c3: mov al, 0; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000402567: mov al, 0x48; add esp, 0x20; pop rbp; ret; 
0x00000000004057b8: mov al, 0xe8; ret 0xfff9; 
0x0000000000407ead: mov al, 0xff; call qword ptr [rbx]; 
0x0000000000407779: mov al, 0xff; jmp rsp; 
0x0000000000405ad8: mov al, 1; pop rbp; ret; 
0x0000000000402d14: mov al, byte ptr [rbp - 1]; add rsp, 0x10; pop rbp; ret; 
0x00000000004024e7: mov al, byte ptr [rbp - 1]; add rsp, 0x30; pop rbp; ret; 
0x0000000000402d67: mov al, byte ptr [rbp - 1]; and al, 1; add rsp, 0x20; pop rbp; ret; 
0x00000000004055e4: mov byte ptr [rax - 0x7d], cl; ret 0xe801; 
0x0000000000402d63: mov byte ptr [rbp - 1], 0; mov al, byte ptr [rbp - 1]; and al, 1; add rsp, 0x20; pop rbp; ret; 
0x0000000000402d10: mov byte ptr [rbp - 1], 1; mov al, byte ptr [rbp - 1]; add rsp, 0x10; pop rbp; ret; 
0x00000000004024e4: mov byte ptr [rbp - 1], al; mov al, byte ptr [rbp - 1]; add rsp, 0x30; pop rbp; ret; 
0x0000000000402955: mov byte ptr [rbp - 1], bh; mov byte ptr [rip + 0x2069a9], dil; pop rbp; ret; 
0x0000000000402575: mov byte ptr [rbp - 1], bh; mov eax, edi; pop rbp; ret; 
0x0000000000402954: mov byte ptr [rbp - 1], dil; mov byte ptr [rip + 0x2069a9], dil; pop rbp; ret; 
0x0000000000402574: mov byte ptr [rbp - 1], dil; mov eax, edi; pop rbp; ret; 
0x0000000000402959: mov byte ptr [rip + 0x2069a9], bh; pop rbp; ret; 
0x0000000000402958: mov byte ptr [rip + 0x2069a9], dil; pop rbp; ret; 
0x00000000004017d2: mov byte ptr [rip + 0x207aef], 1; pop rbp; ret; 
0x0000000000402561: mov ch, byte ptr [rbp + 0x20]; add byte ptr [rcx], al; jne 0x2518; add rsp, 0x20; pop rbp; ret; 
0x00000000004077e1: mov dh, 0xff; call qword ptr [rax + 7]; 
0x00000000004077d9: mov dh, 0xff; push qword ptr [rdi + rax]; add byte ptr [rax], al; pushfq; mov dh, 0xff; call qword ptr [rax + 7]; 
0x0000000000407f55: mov dl, 0xff; jmp qword ptr [rbp]; 
0x0000000000403205: mov dword ptr [rax + 4], ecx; mov eax, dword ptr [rbp - 4]; pop rbp; ret; 
0x00000000004032e8: mov dword ptr [rax], ebx; mov rax, qword ptr [rbp - 0x18]; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x000000000040311f: mov dword ptr [rax], ebx; mov rax, qword ptr [rbp - 0x20]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000040412d: mov dword ptr [rax], ebx; mov rax, qword ptr [rbp - 0x20]; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x000000000040316b: mov dword ptr [rax], esi; pop rbp; ret; 
0x000000000040288a: mov dword ptr [rbp - 0x10], 0xffffffff; mov rax, qword ptr [rbp - 0x10]; add rsp, 0x40; pop rbp; ret; 
0x0000000000404404: mov dword ptr [rbp - 0x10], ecx; mov r8, -1; call 0x4420; add rsp, 0x20; pop rbp; ret; 
0x0000000000404160: mov dword ptr [rbp - 0x10], edx; mov ecx, 0x609318; call 0x3f80; add rsp, 0x20; pop rbp; ret; 
0x0000000000404abd: mov dword ptr [rbp - 0x18], 0; mov rax, qword ptr [rbp - 0x18]; add rsp, 0x20; pop rbp; ret; 
0x0000000000402914: mov dword ptr [rbp - 0x18], 0; mov rax, qword ptr [rbp - 0x18]; add rsp, 0x30; pop rbp; ret; 
0x0000000000404957: mov dword ptr [rbp - 0x18], eax; lea r8, [rbp - 0x20]; call 0x4820; add rsp, 0xf0; pop rbp; ret; 
0x0000000000405219: mov dword ptr [rbp - 0x1c], eax; mov eax, dword ptr [rbp - 0x1c]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004050b6: mov dword ptr [rbp - 0x20], eax; mov eax, dword ptr [rbp - 0x20]; add rsp, 0x70; pop rbp; ret; 
0x000000000040268b: mov dword ptr [rbp - 0x28], eax; mov rax, qword ptr [rbp - 0x28]; add rsp, 0x50; pop rbp; ret; 
0x0000000000402ec7: mov dword ptr [rbp - 0x30], eax; mov rax, qword ptr [rbp - 0x30]; add rsp, 0x50; pop rbp; ret; 
0x0000000000402b3b: mov dword ptr [rbp - 4], eax; add rsp, 0x20; pop rbp; ret; 
0x0000000000405260: mov dword ptr [rbp - 4], eax; mov eax, dword ptr [rbp - 4]; add rsp, 0x10; pop rbp; ret; 
0x00000000004052e6: mov dword ptr [rbp - 4], eax; mov eax, dword ptr [rbp - 4]; add rsp, 0x30; pop rbp; ret; 
0x0000000000405985: mov dword ptr [rbp - 4], eax; mov eax, dword ptr [rbp - 4]; add rsp, 0x40; pop rbp; ret; 
0x00000000004031ff: mov dword ptr [rbp - 4], ecx; mov ecx, dword ptr [rbp - 8]; mov dword ptr [rax + 4], ecx; mov eax, dword ptr [rbp - 4]; pop rbp; ret; 
0x0000000000405123: mov dword ptr [rbp - 8], 0; mov eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000402b33: mov dword ptr [rbp - 8], ecx; call 0x1510; mov dword ptr [rbp - 4], eax; add rsp, 0x20; pop rbp; ret; 
0x0000000000403d68: mov dword ptr [rbp - 8], ecx; mov rax, qword ptr [rbp - 8]; add rsp, 0x30; pop rbp; ret; 
0x0000000000404b79: mov dword ptr [rbp - 8], edi; call 0x49f0; add rsp, 0x10; pop rbp; ret; 
0x00000000004043b9: mov dword ptr [rbp - 8], edi; mov esi, 0x3a; call 0x4380; add rsp, 0x10; pop rbp; ret; 
0x0000000000402935: mov dword ptr [rbp - 8], edi; mov qword ptr [rip + 0x2069c1], rdi; pop rbp; ret; 
0x0000000000402ee9: mov dword ptr [rbp - 8], edi; mov rdi, qword ptr [rdi + 0x10]; call 0x1380; add rsp, 0x10; pop rbp; ret; 
0x0000000000402d85: mov dword ptr [rbp - 8], edi; xorps xmm0, xmm0; movups xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], 0; pop rbp; ret; 
0x00000000004043dd: mov dword ptr [rbp - 8], esi; mov edx, 0x3a; call 0x4310; add rsp, 0x10; pop rbp; ret; 
0x0000000000402dad: mov dword ptr [rbp - 8], esi; mov edx, 0xa; call 0x2dc0; add rsp, 0x10; pop rbp; ret; 
0x0000000000404b9d: mov dword ptr [rbp - 8], esi; mov edx, 1; call 0x4ae0; add rsp, 0x10; pop rbp; ret; 
0x000000000040325e: mov dword ptr [rcx + 0x30], eax; add rsp, 0x20; pop rbp; ret; 
0x0000000000403e86: mov dword ptr [rcx], eax; mov rax, qword ptr [rbp - 0x40]; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x0000000000402d8f: mov dword ptr [rdi + 0x10], 0; pop rbp; ret; 
0x00000000004030bd: mov dword ptr [rip + 0x2061e5], eax; add rsp, 0x20; pop rbp; ret; 
0x00000000004030b6: mov dword ptr [rip + 0x206254], eax; mov qword ptr [rip + 0x2061e5], rax; add rsp, 0x20; pop rbp; ret; 
0x0000000000402939: mov dword ptr [rip + 0x2069c1], edi; pop rbp; ret; 
0x0000000000407924: mov eax, 0x3c00000b; sar edi, 1; call rsp; 
0x0000000000403166: mov eax, 0x609318; mov dword ptr [rax], esi; pop rbp; ret; 
0x0000000000403143: mov eax, 0x609318; mov eax, dword ptr [rax]; pop rbp; ret; 
0x0000000000403014: mov eax, 0x7fffffff; add rsp, 0x20; pop rbp; ret; 
0x00000000004032e4: mov eax, 0x89ffffe0; sbb byte ptr [rax - 0x75], cl; call 0x58c4b63a; pop rbx; pop rbp; ret; 
0x0000000000404408: mov eax, 0xffffffff; call 0x4420; add rsp, 0x20; pop rbp; ret; 
0x0000000000403148: mov eax, dword ptr [rax]; pop rbp; ret; 
0x0000000000402892: mov eax, dword ptr [rbp - 0x10]; add rsp, 0x40; pop rbp; ret; 
0x0000000000404cee: mov eax, dword ptr [rbp - 0x10]; call 0x4d00; mov eax, dword ptr [rbp - 8]; add rsp, 0x30; pop rbp; ret; 
0x0000000000402687: mov eax, dword ptr [rbp - 0x10]; mov qword ptr [rbp - 0x28], rax; mov rax, qword ptr [rbp - 0x28]; add rsp, 0x50; pop rbp; ret; 
0x0000000000404805: mov eax, dword ptr [rbp - 0x10]; mov r9, qword ptr [rbp - 8]; call 0x4560; add rsp, 0x30; pop rbp; ret; 
0x0000000000403256: mov eax, dword ptr [rbp - 0x10]; mov rcx, qword ptr [rbp - 8]; mov qword ptr [rcx + 0x30], rax; add rsp, 0x20; pop rbp; ret; 
0x0000000000402aa5: mov eax, dword ptr [rbp - 0x10]; pop rbp; ret; 
0x00000000004058ce: mov eax, dword ptr [rbp - 0x14]; add rsp, 0x30; pop rbp; ret; 
0x00000000004054f3: mov eax, dword ptr [rbp - 0x18]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000404ac5: mov eax, dword ptr [rbp - 0x18]; add rsp, 0x20; pop rbp; ret; 
0x0000000000402cbe: mov eax, dword ptr [rbp - 0x18]; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000040291c: mov eax, dword ptr [rbp - 0x18]; add rsp, 0x30; pop rbp; ret; 
0x00000000004032eb: mov eax, dword ptr [rbp - 0x18]; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x000000000040521c: mov eax, dword ptr [rbp - 0x1c]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004050b3: mov eax, dword ptr [rbp - 0x1c]; mov dword ptr [rbp - 0x20], eax; mov eax, dword ptr [rbp - 0x20]; add rsp, 0x70; pop rbp; ret; 
0x0000000000403122: mov eax, dword ptr [rbp - 0x20]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004050b9: mov eax, dword ptr [rbp - 0x20]; add rsp, 0x70; pop rbp; ret; 
0x0000000000404130: mov eax, dword ptr [rbp - 0x20]; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x000000000040268f: mov eax, dword ptr [rbp - 0x28]; add rsp, 0x50; pop rbp; ret; 
0x0000000000402ec3: mov eax, dword ptr [rbp - 0x28]; mov qword ptr [rbp - 0x30], rax; mov rax, qword ptr [rbp - 0x30]; add rsp, 0x50; pop rbp; ret; 
0x0000000000402ecb: mov eax, dword ptr [rbp - 0x30]; add rsp, 0x50; pop rbp; ret; 
0x000000000040580a: mov eax, dword ptr [rbp - 0x30]; add rsp, 0xf0; pop rbx; pop r14; pop rbp; ret; 
0x0000000000403e89: mov eax, dword ptr [rbp - 0x40]; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x0000000000405c72: mov eax, dword ptr [rbp - 4]; add eax, -0x20; pop rbp; ret; 
0x0000000000405c52: mov eax, dword ptr [rbp - 4]; add eax, 0x20; pop rbp; ret; 
0x0000000000405263: mov eax, dword ptr [rbp - 4]; add rsp, 0x10; pop rbp; ret; 
0x000000000040516c: mov eax, dword ptr [rbp - 4]; add rsp, 0x20; pop rbp; ret; 
0x00000000004052e9: mov eax, dword ptr [rbp - 4]; add rsp, 0x30; pop rbp; ret; 
0x0000000000405988: mov eax, dword ptr [rbp - 4]; add rsp, 0x40; pop rbp; ret; 
0x0000000000403208: mov eax, dword ptr [rbp - 4]; pop rbp; ret; 
0x0000000000404a12: mov eax, dword ptr [rbp - 8]; add rsp, 0x10; pop rbp; ret; 
0x0000000000401ed5: mov eax, dword ptr [rbp - 8]; add rsp, 0x20; pop rbp; ret; 
0x0000000000403d6c: mov eax, dword ptr [rbp - 8]; add rsp, 0x30; pop rbp; ret; 
0x0000000000402f8a: mov eax, dword ptr [rbp - 8]; add rsp, 0x50; pop rbp; ret; 
0x00000000004030b2: mov eax, dword ptr [rbp - 8]; mov qword ptr [rip + 0x206254], rax; mov qword ptr [rip + 0x2061e5], rax; add rsp, 0x20; pop rbp; ret; 
0x00000000004031d0: mov eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x000000000040134d: mov eax, dword ptr [rip + 0x207ca5]; test rax, rax; je 0x135a; call rax; 
0x000000000040134d: mov eax, dword ptr [rip + 0x207ca5]; test rax, rax; je 0x135a; call rax; add rsp, 8; ret; 
0x00000000004044f7: mov eax, eax; call 0x4420; add rsp, 0x20; pop rbp; ret; 
0x0000000000404c3d: mov eax, ebx; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000404bd1: mov eax, ebx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000040425d: mov eax, edi; add rsp, 0x40; pop rbp; ret; 
0x0000000000402578: mov eax, edi; pop rbp; ret; 
0x000000000040495f: mov ebp, 0x48fffffe; add esp, 0xf0; pop rbp; ret; 
0x00000000004022b6: mov ebp, 0xffffff78; call 0x1380; add rsp, 0xb0; pop rbp; ret; 
0x00000000004017cb: mov ebp, esp; call 0x1750; mov byte ptr [rip + 0x207aef], 1; pop rbp; ret; 
0x0000000000402952: mov ebp, esp; mov byte ptr [rbp - 1], dil; mov byte ptr [rip + 0x2069a9], dil; pop rbp; ret; 
0x0000000000402572: mov ebp, esp; mov byte ptr [rbp - 1], dil; mov eax, edi; pop rbp; ret; 
0x0000000000402582: mov ebp, esp; mov edi, 1; call 0x1800; pop rbp; ret; 
0x0000000000402932: mov ebp, esp; mov qword ptr [rbp - 8], rdi; mov qword ptr [rip + 0x2069c1], rdi; pop rbp; ret; 
0x00000000004019c2: mov ebp, esp; pop rbp; ret; 
0x0000000000404526: mov ecx, 0x609210; call 0x3f80; add rsp, 0x10; pop rbp; ret; 
0x0000000000403f66: mov ecx, 0x609318; call 0x3f80; add rsp, 0x10; pop rbp; ret; 
0x0000000000404163: mov ecx, 0x609318; call 0x3f80; add rsp, 0x20; pop rbp; ret; 
0x0000000000405d0b: mov ecx, 0xffff; sub rsp, 8; add rsp, 8; ret; 
0x0000000000402416: mov ecx, dword ptr [rbp - 0x30]; add rax, qword ptr [rcx + 0x10]; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000404809: mov ecx, dword ptr [rbp - 8]; call 0x4560; add rsp, 0x30; pop rbp; ret; 
0x00000000004048c3: mov ecx, dword ptr [rbp - 8]; lea r8, [rbp - 0x80]; call 0x4560; add rsp, 0x80; pop rbp; ret; 
0x0000000000403202: mov ecx, dword ptr [rbp - 8]; mov dword ptr [rax + 4], ecx; mov eax, dword ptr [rbp - 4]; pop rbp; ret; 
0x000000000040325a: mov ecx, dword ptr [rbp - 8]; mov qword ptr [rcx + 0x30], rax; add rsp, 0x20; pop rbp; ret; 
0x0000000000403d9a: mov ecx, eax; call 0x3db0; add rsp, 0x20; pop rbp; ret; 
0x0000000000404303: mov ecx, eax; call 0x4270; add rsp, 0x20; pop rbp; ret; 
0x00000000004044b6: mov ecx, eax; call 0x43f0; add rsp, 0x20; pop rbp; ret; 
0x00000000004041fe: mov ecx, ebx; call 0x3f80; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x0000000000404480: mov ecx, ebx; call 0x3f80; add rsp, 0x68; pop rbx; pop rbp; ret; 
0x00000000004049a2: mov edi, 0x406f74; call 0x1530; pop rbp; ret; 
0x000000000040176c: mov edi, 0x609268; jmp rax; 
0x0000000000402584: mov edi, 1; call 0x1800; pop rbp; ret; 
0x00000000004049d2: mov edi, dword ptr [rbp - 0x10]; imul rdi, qword ptr [rbp - 8]; call 0x49f0; add rsp, 0x10; pop rbp; ret; 
0x0000000000402876: mov edi, dword ptr [rbp - 0x30]; mov rsi, qword ptr [rbp - 0x28]; mov rdx, qword ptr [rbp - 0x20]; call 0x2710; call qword ptr [rbp - 0x18]; 
0x00000000004022b5: mov edi, dword ptr [rbp - 0x88]; call 0x1380; add rsp, 0xb0; pop rbp; ret; 
0x0000000000402eed: mov edi, dword ptr [rdi + 0x10]; call 0x1380; add rsp, 0x10; pop rbp; ret; 
0x0000000000402b74: mov edi, eax; call 0x2b20; add rsp, 0x10; pop rbp; ret; 
0x0000000000404c67: mov edi, ebx; call 0x4c10; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004043e0: mov edx, 0x3a; call 0x4310; add rsp, 0x10; pop rbp; ret; 
0x00000000004043c2: mov edx, 0x48ffffff; add esp, 0x10; pop rbp; ret; 
0x0000000000402db0: mov edx, 0xa; call 0x2dc0; add rsp, 0x10; pop rbp; ret; 
0x0000000000404520: mov edx, 0xffffffff; mov ecx, 0x609210; call 0x3f80; add rsp, 0x10; pop rbp; ret; 
0x0000000000403f60: mov edx, 0xffffffff; mov ecx, 0x609318; call 0x3f80; add rsp, 0x10; pop rbp; ret; 
0x0000000000404ba0: mov edx, 1; call 0x4ae0; add rsp, 0x10; pop rbp; ret; 
0x0000000000405288: mov edx, 1; call 0x52a0; add rsp, 0x10; pop rbp; ret; 
0x000000000040287e: mov edx, dword ptr [rbp - 0x20]; call 0x2710; call qword ptr [rbp - 0x18]; 
0x00000000004018ec: mov edx, dword ptr [rip + 0x207a1e]; mov esi, 0x40703e; xor eax, eax; call 0x1570; pop rbp; ret; 
0x00000000004041bc: mov edx, eax; call 0x4150; add rsp, 0x10; pop rbp; ret; 
0x00000000004042c9: mov edx, eax; call 0x41d0; add rsp, 0x10; pop rbp; ret; 
0x0000000000404300: mov edx, ecx; mov rcx, rax; call 0x4270; add rsp, 0x20; pop rbp; ret; 
0x00000000004044b3: mov edx, ecx; mov rcx, rax; call 0x43f0; add rsp, 0x20; pop rbp; ret; 
0x00000000004043bc: mov esi, 0x3a; call 0x4380; add rsp, 0x10; pop rbp; ret; 
0x00000000004018f2: mov esi, 0x40703e; xor eax, eax; call 0x1570; pop rbp; ret; 
0x0000000000404791: mov esi, 0x40751b; xor eax, eax; call 0x1570; add rsp, 0x60; pop rbp; ret; 
0x0000000000404395: mov esi, 0xffffffff; call 0x4310; add rsp, 0x10; pop rbp; ret; 
0x0000000000404a4d: mov esi, dword ptr [rbp - 0x10]; imul rsi, qword ptr [rbp - 8]; call 0x4a70; add rsp, 0x20; pop rbp; ret; 
0x000000000040287a: mov esi, dword ptr [rbp - 0x28]; mov rdx, qword ptr [rbp - 0x20]; call 0x2710; call qword ptr [rbp - 0x18]; 
0x0000000000404b58: mov esi, dword ptr [rbp - 8]; imul rsi, qword ptr [rbp - 0x10]; call 0x4a70; add rsp, 0x20; pop rbp; ret; 
0x000000000040499c: mov esi, dword ptr [rip + 0x2048e6]; mov edi, 0x406f74; call 0x1530; pop rbp; ret; 
0x0000000000404192: mov esi, eax; call 0x3f50; add rsp, 0x10; pop rbp; ret; 
0x0000000000404552: mov esi, eax; call 0x4510; add rsp, 0x10; pop rbp; ret; 
0x00000000004019b3: mov esi, ecx; call 0x1480; add rsp, 0x10; pop rbp; ret; 
0x00000000004041b9: mov esi, ecx; mov rdx, rax; call 0x4150; add rsp, 0x10; pop rbp; ret; 
0x00000000004042c6: mov esi, ecx; mov rdx, rax; call 0x41d0; add rsp, 0x10; pop rbp; ret; 
0x0000000000402aa3: mov esp, 0xf0458b48; pop rbp; ret; 
0x0000000000402889: mov qword ptr [rbp - 0x10], -1; mov rax, qword ptr [rbp - 0x10]; add rsp, 0x40; pop rbp; ret; 
0x0000000000404403: mov qword ptr [rbp - 0x10], rcx; mov r8, -1; call 0x4420; add rsp, 0x20; pop rbp; ret; 
0x000000000040415f: mov qword ptr [rbp - 0x10], rdx; mov ecx, 0x609318; call 0x3f80; add rsp, 0x20; pop rbp; ret; 
0x0000000000404abc: mov qword ptr [rbp - 0x18], 0; mov rax, qword ptr [rbp - 0x18]; add rsp, 0x20; pop rbp; ret; 
0x0000000000402913: mov qword ptr [rbp - 0x18], 0; mov rax, qword ptr [rbp - 0x18]; add rsp, 0x30; pop rbp; ret; 
0x0000000000404956: mov qword ptr [rbp - 0x18], rax; lea r8, [rbp - 0x20]; call 0x4820; add rsp, 0xf0; pop rbp; ret; 
0x000000000040268a: mov qword ptr [rbp - 0x28], rax; mov rax, qword ptr [rbp - 0x28]; add rsp, 0x50; pop rbp; ret; 
0x0000000000402ec6: mov qword ptr [rbp - 0x30], rax; mov rax, qword ptr [rbp - 0x30]; add rsp, 0x50; pop rbp; ret; 
0x0000000000403d67: mov qword ptr [rbp - 8], rcx; mov rax, qword ptr [rbp - 8]; add rsp, 0x30; pop rbp; ret; 
0x0000000000404b78: mov qword ptr [rbp - 8], rdi; call 0x49f0; add rsp, 0x10; pop rbp; ret; 
0x00000000004043b8: mov qword ptr [rbp - 8], rdi; mov esi, 0x3a; call 0x4380; add rsp, 0x10; pop rbp; ret; 
0x0000000000402934: mov qword ptr [rbp - 8], rdi; mov qword ptr [rip + 0x2069c1], rdi; pop rbp; ret; 
0x0000000000402ee8: mov qword ptr [rbp - 8], rdi; mov rdi, qword ptr [rdi + 0x10]; call 0x1380; add rsp, 0x10; pop rbp; ret; 
0x0000000000402d84: mov qword ptr [rbp - 8], rdi; xorps xmm0, xmm0; movups xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], 0; pop rbp; ret; 
0x00000000004043dc: mov qword ptr [rbp - 8], rsi; mov edx, 0x3a; call 0x4310; add rsp, 0x10; pop rbp; ret; 
0x0000000000402dac: mov qword ptr [rbp - 8], rsi; mov edx, 0xa; call 0x2dc0; add rsp, 0x10; pop rbp; ret; 
0x0000000000404b9c: mov qword ptr [rbp - 8], rsi; mov edx, 1; call 0x4ae0; add rsp, 0x10; pop rbp; ret; 
0x000000000040325d: mov qword ptr [rcx + 0x30], rax; add rsp, 0x20; pop rbp; ret; 
0x0000000000403e85: mov qword ptr [rcx], rax; mov rax, qword ptr [rbp - 0x40]; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x0000000000402d8e: mov qword ptr [rdi + 0x10], 0; pop rbp; ret; 
0x00000000004030bc: mov qword ptr [rip + 0x2061e5], rax; add rsp, 0x20; pop rbp; ret; 
0x00000000004030b5: mov qword ptr [rip + 0x206254], rax; mov qword ptr [rip + 0x2061e5], rax; add rsp, 0x20; pop rbp; ret; 
0x0000000000402938: mov qword ptr [rip + 0x2069c1], rdi; pop rbp; ret; 
0x0000000000404407: mov r8, -1; call 0x4420; add rsp, 0x20; pop rbp; ret; 
0x0000000000404ced: mov r8, qword ptr [rbp - 0x10]; call 0x4d00; mov eax, dword ptr [rbp - 8]; add rsp, 0x30; pop rbp; ret; 
0x0000000000404804: mov r8, qword ptr [rbp - 0x10]; mov r9, qword ptr [rbp - 8]; call 0x4560; add rsp, 0x30; pop rbp; ret; 
0x00000000004044f6: mov r8, rax; call 0x4420; add rsp, 0x20; pop rbp; ret; 
0x0000000000404808: mov r9, qword ptr [rbp - 8]; call 0x4560; add rsp, 0x30; pop rbp; ret; 
0x00000000004048c2: mov r9, qword ptr [rbp - 8]; lea r8, [rbp - 0x80]; call 0x4560; add rsp, 0x80; pop rbp; ret; 
0x0000000000402891: mov rax, qword ptr [rbp - 0x10]; add rsp, 0x40; pop rbp; ret; 
0x0000000000402686: mov rax, qword ptr [rbp - 0x10]; mov qword ptr [rbp - 0x28], rax; mov rax, qword ptr [rbp - 0x28]; add rsp, 0x50; pop rbp; ret; 
0x0000000000403255: mov rax, qword ptr [rbp - 0x10]; mov rcx, qword ptr [rbp - 8]; mov qword ptr [rcx + 0x30], rax; add rsp, 0x20; pop rbp; ret; 
0x0000000000402aa4: mov rax, qword ptr [rbp - 0x10]; pop rbp; ret; 
0x00000000004054f2: mov rax, qword ptr [rbp - 0x18]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000404ac4: mov rax, qword ptr [rbp - 0x18]; add rsp, 0x20; pop rbp; ret; 
0x0000000000402cbd: mov rax, qword ptr [rbp - 0x18]; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000040291b: mov rax, qword ptr [rbp - 0x18]; add rsp, 0x30; pop rbp; ret; 
0x00000000004032ea: mov rax, qword ptr [rbp - 0x18]; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x0000000000403121: mov rax, qword ptr [rbp - 0x20]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000040412f: mov rax, qword ptr [rbp - 0x20]; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x000000000040268e: mov rax, qword ptr [rbp - 0x28]; add rsp, 0x50; pop rbp; ret; 
0x0000000000402ec2: mov rax, qword ptr [rbp - 0x28]; mov qword ptr [rbp - 0x30], rax; mov rax, qword ptr [rbp - 0x30]; add rsp, 0x50; pop rbp; ret; 
0x0000000000402eca: mov rax, qword ptr [rbp - 0x30]; add rsp, 0x50; pop rbp; ret; 
0x0000000000405809: mov rax, qword ptr [rbp - 0x30]; add rsp, 0xf0; pop rbx; pop r14; pop rbp; ret; 
0x0000000000403e88: mov rax, qword ptr [rbp - 0x40]; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x0000000000404a11: mov rax, qword ptr [rbp - 8]; add rsp, 0x10; pop rbp; ret; 
0x0000000000401ed4: mov rax, qword ptr [rbp - 8]; add rsp, 0x20; pop rbp; ret; 
0x0000000000403d6b: mov rax, qword ptr [rbp - 8]; add rsp, 0x30; pop rbp; ret; 
0x00000000004030b1: mov rax, qword ptr [rbp - 8]; mov qword ptr [rip + 0x206254], rax; mov qword ptr [rip + 0x2061e5], rax; add rsp, 0x20; pop rbp; ret; 
0x000000000040134c: mov rax, qword ptr [rip + 0x207ca5]; test rax, rax; je 0x135a; call rax; 
0x000000000040134c: mov rax, qword ptr [rip + 0x207ca5]; test rax, rax; je 0x135a; call rax; add rsp, 8; ret; 
0x0000000000404c3c: mov rax, rbx; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000404bd0: mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000040425c: mov rax, rdi; add rsp, 0x40; pop rbp; ret; 
0x00000000004017ca: mov rbp, rsp; call 0x1750; mov byte ptr [rip + 0x207aef], 1; pop rbp; ret; 
0x0000000000402951: mov rbp, rsp; mov byte ptr [rbp - 1], dil; mov byte ptr [rip + 0x2069a9], dil; pop rbp; ret; 
0x0000000000402571: mov rbp, rsp; mov byte ptr [rbp - 1], dil; mov eax, edi; pop rbp; ret; 
0x0000000000402581: mov rbp, rsp; mov edi, 1; call 0x1800; pop rbp; ret; 
0x0000000000402931: mov rbp, rsp; mov qword ptr [rbp - 8], rdi; mov qword ptr [rip + 0x2069c1], rdi; pop rbp; ret; 
0x00000000004019c1: mov rbp, rsp; pop rbp; ret; 
0x0000000000402415: mov rcx, qword ptr [rbp - 0x30]; add rax, qword ptr [rcx + 0x10]; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000403259: mov rcx, qword ptr [rbp - 8]; mov qword ptr [rcx + 0x30], rax; add rsp, 0x20; pop rbp; ret; 
0x0000000000403d99: mov rcx, rax; call 0x3db0; add rsp, 0x20; pop rbp; ret; 
0x0000000000404302: mov rcx, rax; call 0x4270; add rsp, 0x20; pop rbp; ret; 
0x00000000004044b5: mov rcx, rax; call 0x43f0; add rsp, 0x20; pop rbp; ret; 
0x00000000004041fd: mov rcx, rbx; call 0x3f80; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x000000000040447f: mov rcx, rbx; call 0x3f80; add rsp, 0x68; pop rbx; pop rbp; ret; 
0x00000000004049d1: mov rdi, qword ptr [rbp - 0x10]; imul rdi, qword ptr [rbp - 8]; call 0x49f0; add rsp, 0x10; pop rbp; ret; 
0x0000000000402875: mov rdi, qword ptr [rbp - 0x30]; mov rsi, qword ptr [rbp - 0x28]; mov rdx, qword ptr [rbp - 0x20]; call 0x2710; call qword ptr [rbp - 0x18]; 
0x00000000004022b4: mov rdi, qword ptr [rbp - 0x88]; call 0x1380; add rsp, 0xb0; pop rbp; ret; 
0x0000000000402eec: mov rdi, qword ptr [rdi + 0x10]; call 0x1380; add rsp, 0x10; pop rbp; ret; 
0x0000000000404c66: mov rdi, rbx; call 0x4c10; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000040451f: mov rdx, -1; mov ecx, 0x609210; call 0x3f80; add rsp, 0x10; pop rbp; ret; 
0x0000000000403f5f: mov rdx, -1; mov ecx, 0x609318; call 0x3f80; add rsp, 0x10; pop rbp; ret; 
0x000000000040287d: mov rdx, qword ptr [rbp - 0x20]; call 0x2710; call qword ptr [rbp - 0x18]; 
0x00000000004018eb: mov rdx, qword ptr [rip + 0x207a1e]; mov esi, 0x40703e; xor eax, eax; call 0x1570; pop rbp; ret; 
0x00000000004041bb: mov rdx, rax; call 0x4150; add rsp, 0x10; pop rbp; ret; 
0x00000000004042c8: mov rdx, rax; call 0x41d0; add rsp, 0x10; pop rbp; ret; 
0x00000000004042ff: mov rdx, rcx; mov rcx, rax; call 0x4270; add rsp, 0x20; pop rbp; ret; 
0x00000000004044b2: mov rdx, rcx; mov rcx, rax; call 0x43f0; add rsp, 0x20; pop rbp; ret; 
0x0000000000404394: mov rsi, -1; call 0x4310; add rsp, 0x10; pop rbp; ret; 
0x0000000000404a4c: mov rsi, qword ptr [rbp - 0x10]; imul rsi, qword ptr [rbp - 8]; call 0x4a70; add rsp, 0x20; pop rbp; ret; 
0x0000000000402879: mov rsi, qword ptr [rbp - 0x28]; mov rdx, qword ptr [rbp - 0x20]; call 0x2710; call qword ptr [rbp - 0x18]; 
0x0000000000404b57: mov rsi, qword ptr [rbp - 8]; imul rsi, qword ptr [rbp - 0x10]; call 0x4a70; add rsp, 0x20; pop rbp; ret; 
0x000000000040499b: mov rsi, qword ptr [rip + 0x2048e6]; mov edi, 0x406f74; call 0x1530; pop rbp; ret; 
0x0000000000404191: mov rsi, rax; call 0x3f50; add rsp, 0x10; pop rbp; ret; 
0x0000000000404551: mov rsi, rax; call 0x4510; add rsp, 0x10; pop rbp; ret; 
0x00000000004019b2: mov rsi, rcx; call 0x1480; add rsp, 0x10; pop rbp; ret; 
0x00000000004041b8: mov rsi, rcx; mov rdx, rax; call 0x4150; add rsp, 0x10; pop rbp; ret; 
0x0000000000404c6a: movabs byte ptr [0x5b08c48348ffffff], al; pop rbp; ret; 
0x0000000000404255: movaps xmm0, xmmword ptr [rbp - 0x40]; movups xmmword ptr [rdi], xmm0; mov rax, rdi; add rsp, 0x40; pop rbp; ret; 
0x000000000040134f: movsd dword ptr [rdi], dword ptr [rsi]; jl 0x1372; add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x0000000000404390: movsx edx, byte ptr [rbp - 1]; mov rsi, -1; call 0x4310; add rsp, 0x10; pop rbp; ret; 
0x0000000000402d8b: movups xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], 0; pop rbp; ret; 
0x0000000000404259: movups xmmword ptr [rdi], xmm0; mov rax, rdi; add rsp, 0x40; pop rbp; ret; 
0x0000000000401773: nop dword ptr [rax + rax]; pop rbp; ret; 
0x00000000004017b5: nop dword ptr [rax]; pop rbp; ret; 
0x0000000000402db1: or al, byte ptr [rax]; add byte ptr [rax], al; call 0x2dc0; add rsp, 0x10; pop rbp; ret; 
0x0000000000404cf2: or al, byte ptr [rax]; add byte ptr [rax], al; mov eax, dword ptr [rbp - 8]; add rsp, 0x30; pop rbp; ret; 
0x0000000000402912: or byte ptr [rax - 0x39], cl; call 0x291b; mov rax, qword ptr [rbp - 0x18]; add rsp, 0x30; pop rbp; ret; 
0x00000000004055e0: or byte ptr [rax - 0x75], 0x55; mov byte ptr [rax - 0x7d], cl; ret 0xe801; 
0x000000000040134b: or byte ptr [rax - 0x75], cl; add eax, 0x207ca5; test rax, rax; je 0x135a; call rax; 
0x000000000040577c: or byte ptr [rax - 0x7d], cl; ret 0x4802; 
0x0000000000408381: or byte ptr [rax], al; add byte ptr [rdi + rax*8 - 1], bl; call qword ptr [rax]; 
0x00000000004029ac: or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000404a10: or cl, byte ptr [rax - 0x75]; clc; add rsp, 0x10; pop rbp; ret; 
0x0000000000404bfd: or cl, byte ptr [rax - 0x75]; clc; add rsp, 0x20; pop rbp; ret; 
0x0000000000405beb: or dword ptr [rbx + 0xf5bfc7d], eax; pushfq; shr bl, 2; xor eax, eax; pop rbp; ret; 
0x000000000040440f: or eax, 0x48000000; add esp, 0x20; pop rbp; ret; 
0x0000000000405bd9: or eax, 0x5dc0940f; ret; 
0x0000000000405bcf: or eax, 0xcfc7d83; je 0x5bdd; cmp dword ptr [rbp - 4], 0xd; sete al; pop rbp; ret; 
0x000000000040861f: or eax, 6; sbb byte ptr [rax], al; add byte ptr [rax], al; or r8d, dword ptr [rax]; add byte ptr [rbx + rdx*8 - 1], dh; jmp qword ptr [rdi]; 
0x0000000000408243: or eax, 6; sbb byte ptr [rax], al; add byte ptr [rax], al; push -0x3ffffff9; ret 0xffff; 
0x000000000040819b: or eax, 6; sbb byte ptr [rax], al; add byte ptr [rax], al; rol byte ptr [rsi], 0; add byte ptr [rax], cl; ret 0xffff; 
0x000000000040867d: or eax, dword ptr [rax]; add al, dh; sar edi, cl; jmp qword ptr [rcx]; 
0x0000000000408629: or eax, dword ptr [rax]; add byte ptr [rbx + rdx*8 - 1], dh; jmp qword ptr [rdi]; 
0x000000000040255e: or esi, esi; add eax, 0x206d8a; add dword ptr [rbp - 0x50], esi; add rsp, 0x20; pop rbp; ret; 
0x0000000000408628: or r8d, dword ptr [rax]; add byte ptr [rbx + rdx*8 - 1], dh; jmp qword ptr [rdi]; 
0x000000000040499e: out 0x48, al; and byte ptr [rax], al; mov edi, 0x406f74; call 0x1530; pop rbp; ret; 
0x00000000004031c8: out 1, al; shl esi, cl; xor dword ptr [rax + rdx + 8], esi; mov eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x00000000004017d4: out dx, eax; jp 0x17f7; add byte ptr [rcx], al; pop rbp; ret; 
0x0000000000405cdc: pop r12; pop r13; pop r14; pop r15; ret; 
0x0000000000403cd1: pop r12; pop r14; pop r15; pop rbp; ret; 
0x0000000000405cde: pop r13; pop r14; pop r15; ret; 
0x0000000000403cd3: pop r14; pop r15; pop rbp; ret; 
0x0000000000405ce0: pop r14; pop r15; ret; 
0x0000000000402709: pop r14; pop rbp; ret; 
0x0000000000403cd5: pop r15; pop rbp; ret; 
0x0000000000405ce2: pop r15; ret; 
0x00000000004032f1: pop rax; pop rbx; pop rbp; ret; 
0x000000000040176b: pop rbp; mov edi, 0x609268; jmp rax; 
0x0000000000405cdb: pop rbp; pop r12; pop r13; pop r14; pop r15; ret; 
0x0000000000405cdf: pop rbp; pop r14; pop r15; ret; 
0x0000000000401778: pop rbp; ret; 
0x0000000000403cd0: pop rbx; pop r12; pop r14; pop r15; pop rbp; ret; 
0x0000000000404d98: pop rbx; pop r14; pop r15; pop rbp; ret; 
0x0000000000402708: pop rbx; pop r14; pop rbp; ret; 
0x0000000000402421: pop rbx; pop rbp; ret; 
0x0000000000403cd6: pop rdi; pop rbp; ret; 
0x0000000000405ce3: pop rdi; ret; 
0x0000000000405c4f: pop rdx; jg 0x5c5a; mov eax, dword ptr [rbp - 4]; add eax, 0x20; pop rbp; ret; 
0x0000000000403cd4: pop rsi; pop r15; pop rbp; ret; 
0x0000000000405ce1: pop rsi; pop r15; ret; 
0x000000000040270a: pop rsi; pop rbp; ret; 
0x0000000000407a90: pop rsp; in eax, 0xff; dec eax; adc byte ptr [rax], al; add byte ptr [rbp - 1], bh; jmp rsp; 
0x0000000000405cdd: pop rsp; pop r13; pop r14; pop r15; ret; 
0x0000000000403cd2: pop rsp; pop r14; pop r15; pop rbp; ret; 
0x000000000040824c: push -0x3ffffff9; ret 0xffff; 
0x00000000004077db: push qword ptr [rdi + rax]; add byte ptr [rax], al; pushfq; mov dh, 0xff; call qword ptr [rax + 7]; 
0x0000000000401ed1: push qword ptr [rsp + rax + 0x48]; mov eax, dword ptr [rbp - 8]; add rsp, 0x20; pop rbp; ret; 
0x0000000000402695: push rax; pop rbp; ret; 
0x00000000004055e3: push rbp; mov byte ptr [rax - 0x7d], cl; ret 0xe801; 
0x00000000004017c9: push rbp; mov rbp, rsp; call 0x1750; mov byte ptr [rip + 0x207aef], 1; pop rbp; ret; 
0x0000000000402950: push rbp; mov rbp, rsp; mov byte ptr [rbp - 1], dil; mov byte ptr [rip + 0x2069a9], dil; pop rbp; ret; 
0x0000000000402570: push rbp; mov rbp, rsp; mov byte ptr [rbp - 1], dil; mov eax, edi; pop rbp; ret; 
0x0000000000402580: push rbp; mov rbp, rsp; mov edi, 1; call 0x1800; pop rbp; ret; 
0x0000000000402930: push rbp; mov rbp, rsp; mov qword ptr [rbp - 8], rdi; mov qword ptr [rip + 0x2069c1], rdi; pop rbp; ret; 
0x00000000004019c0: push rbp; mov rbp, rsp; pop rbp; ret; 
0x0000000000407eac: push rsp; mov al, 0xff; call qword ptr [rbx]; 
0x00000000004077e0: pushfq; mov dh, 0xff; call qword ptr [rax + 7]; 
0x0000000000408380: pushfq; or byte ptr [rax], al; add byte ptr [rdi + rax*8 - 1], bl; call qword ptr [rax]; 
0x0000000000408234: pushfq; ret 0xffff; 
0x0000000000405a23: pushfq; shr bl, 2; xor eax, eax; pop rbp; ret; 
0x0000000000403ac0: ret 0; 
0x0000000000401bd9: ret 0x2076; 
0x0000000000401532: ret 0x207b; 
0x00000000004060f8: ret 0x401c; 
0x0000000000405758: ret 0x4802; 
0x0000000000401b3c: ret 0x48d0; 
0x000000000040208d: ret 0x48ff; 
0x000000000040486f: ret 0x8908; 
0x00000000004038d5: ret 0x894c; 
0x00000000004041bd: ret 0x8de8; 
0x0000000000400289: ret 0xa9b2; 
0x00000000004055e7: ret 0xe801; 
0x00000000004042ca: ret 0xe8; 
0x00000000004026d9: ret 0xf1e8; 
0x00000000004057ba: ret 0xfff9; 
0x0000000000403f61: ret 0xffff; 
0x000000000040135e: ret; 
0x0000000000402b15: retf 0x8b48; clc; add rsp, 0x20; pop rbp; ret; 
0x0000000000404998: retf 0xffff; mov rsi, qword ptr [rip + 0x2048e6]; mov edi, 0x406f74; call 0x1530; pop rbp; ret; 
0x0000000000408090: rol al, 0xff; jmp qword ptr [rbx]; 
0x0000000000402b11: rol byte ptr [rax + rax*8 - 0x74b7358b], 0x45; clc; add rsp, 0x20; pop rbp; ret; 
0x00000000004081a4: rol byte ptr [rsi], 0; add byte ptr [rax], cl; ret 0xffff; 
0x0000000000408250: rol dl, 0xff; jmp qword ptr [rsi]; 
0x0000000000403e8a: ror byte ptr [r8 - 0x7d], 0xc4; pop rax; pop rbx; pop rbp; ret; 
0x00000000004024e3: ror byte ptr [rax + 0x458aff45], 0xff; add rsp, 0x30; pop rbp; ret; 
0x0000000000402878: ror byte ptr [rax - 0x75], 1; jne 0x2855; mov rdx, qword ptr [rbp - 0x20]; call 0x2710; call qword ptr [rbp - 0x18]; 
0x00000000004019b1: ror byte ptr [rax - 0x77], 0xce; call 0x1480; add rsp, 0x10; pop rbp; ret; 
0x0000000000403e8b: ror byte ptr [rax - 0x7d], 0xc4; pop rax; pop rbx; pop rbp; ret; 
0x0000000000405984: ror byte ptr [rcx + 0x458bfc45], 0xfc; add rsp, 0x40; pop rbp; ret; 
0x00000000004024e0: ror byte ptr [rdi], 0x95; ror byte ptr [rax + 0x458aff45], 0xff; add rsp, 0x30; pop rbp; ret; 
0x00000000004029a6: sal byte ptr [rbp + 0x67], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000405169: sal byte ptr [rbp - 0x1c], 0x8b; cld; add rsp, 0x20; pop rbp; ret; 
0x0000000000402b13: sal byte ptr [rbp - 0x36], 0x48; mov eax, dword ptr [rbp - 8]; add rsp, 0x20; pop rbp; ret; 
0x0000000000405b9e: sal byte ptr [rcx + rax], 0x5d; ret; 
0x0000000000401355: sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x0000000000404bfb: sal byte ptr [rdx + rcx + 0x48], 0x8b; clc; add rsp, 0x20; pop rbp; ret; 
0x0000000000407929: sar edi, 1; call rsp; 
0x0000000000407951: sar edi, cl; jmp qword ptr [rax + 0xc]; 
0x0000000000408681: sar edi, cl; jmp qword ptr [rcx]; 
0x000000000040862d: sar edi, cl; jmp qword ptr [rdi]; 
0x0000000000402274: sbb byte ptr [rax + 0x20], dh; add al, ch; ret; 
0x00000000004032e9: sbb byte ptr [rax - 0x75], cl; call 0x58c4b63a; pop rbx; pop rbp; ret; 
0x0000000000408624: sbb byte ptr [rax], al; add byte ptr [rax], al; or r8d, dword ptr [rax]; add byte ptr [rbx + rdx*8 - 1], dh; jmp qword ptr [rdi]; 
0x0000000000408248: sbb byte ptr [rax], al; add byte ptr [rax], al; push -0x3ffffff9; ret 0xffff; 
0x000000000040837c: sbb byte ptr [rax], al; add byte ptr [rax], al; pushfq; or byte ptr [rax], al; add byte ptr [rdi + rax*8 - 1], bl; call qword ptr [rax]; 
0x00000000004081a0: sbb byte ptr [rax], al; add byte ptr [rax], al; rol byte ptr [rsi], 0; add byte ptr [rax], cl; ret 0xffff; 
0x0000000000408088: sbb byte ptr [rax], al; add byte ptr [rax], al; test al, 5; add byte ptr [rax], al; rol al, 0xff; jmp qword ptr [rbx]; 
0x0000000000403167: sbb byte ptr [rbx + 0x30890060], dl; pop rbp; ret; 
0x0000000000403128: sbb byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000403144: sbb byte ptr [rbx + 0x8b0060], dl; pop rbp; ret; 
0x0000000000405983: sbb eax, eax; mov dword ptr [rbp - 4], eax; mov eax, dword ptr [rbp - 4]; add rsp, 0x40; pop rbp; ret; 
0x00000000004049d7: scasd eax, dword ptr [rdi]; jge 0x49d2; call 0x49f0; add rsp, 0x10; pop rbp; ret; 
0x0000000000404a52: scasd eax, dword ptr [rdi]; jne 0x4a4d; call 0x4a70; add rsp, 0x20; pop rbp; ret; 
0x0000000000404b5d: scasd eax, dword ptr [rdi]; jne 0x4b50; call 0x4a70; add rsp, 0x20; pop rbp; ret; 
0x0000000000405ab2: sete al; pop rbp; ret; 
0x00000000004024e1: setne al; mov byte ptr [rbp - 1], al; mov al, byte ptr [rbp - 1]; add rsp, 0x30; pop rbp; ret; 
0x0000000000405c76: shl al, 0x5d; ret; 
0x0000000000405c56: shl byte ptr [rax], 0x5d; ret; 
0x00000000004031ca: shl esi, cl; xor dword ptr [rax + rdx + 8], esi; mov eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000405a24: shr bl, 2; xor eax, eax; pop rbp; ret; 
0x0000000000405b9a: shr bl, 4; xor eax, eax; xor al, 1; pop rbp; ret; 
0x000000000040293b: shr dword ptr [rcx + 0x20], 0; pop rbp; ret; 
0x00000000004052e2: stosb byte ptr [rdi], al; ret; 
0x0000000000404256: sub byte ptr [rbp - 0x40], al; movups xmmword ptr [rdi], xmm0; mov rax, rdi; add rsp, 0x40; pop rbp; ret; 
0x0000000000404d97: sub byte ptr [rbx + 0x41], bl; pop rsi; pop r15; pop rbp; ret; 
0x0000000000402420: sub byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000405d11: sub esp, 8; add rsp, 8; ret; 
0x0000000000401349: sub esp, 8; mov rax, qword ptr [rip + 0x207ca5]; test rax, rax; je 0x135a; call rax; 
0x0000000000405d10: sub rsp, 8; add rsp, 8; ret; 
0x0000000000401348: sub rsp, 8; mov rax, qword ptr [rip + 0x207ca5]; test rax, rax; je 0x135a; call rax; 
0x000000000040808c: test al, 5; add byte ptr [rax], al; rol al, 0xff; jmp qword ptr [rbx]; 
0x0000000000402b12: test al, al; jne 0x2ae0; mov rax, qword ptr [rbp - 8]; add rsp, 0x20; pop rbp; ret; 
0x000000000040255f: test byte ptr [rip + 0x206d8a], 1; jne 0x2518; add rsp, 0x20; pop rbp; ret; 
0x000000000040295b: test eax, 0x5d002069; ret; 
0x0000000000401354: test eax, eax; je 0x135a; call rax; 
0x0000000000401354: test eax, eax; je 0x135a; call rax; add rsp, 8; ret; 
0x0000000000401767: test eax, eax; je 0x1778; pop rbp; mov edi, 0x609268; jmp rax; 
0x00000000004017a9: test eax, eax; je 0x17b8; pop rbp; mov edi, 0x609268; jmp rax; 
0x0000000000404bfa: test eax, eax; je 0x4c08; mov rax, qword ptr [rbp - 8]; add rsp, 0x20; pop rbp; ret; 
0x00000000004029a5: test eax, eax; jne 0x2a10; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000405168: test eax, eax; jne 0x5150; mov eax, dword ptr [rbp - 4]; add rsp, 0x20; pop rbp; ret; 
0x0000000000405ac7: test edi, 0xffffffe0; je 0x5ad8; cmp dword ptr [rbp - 4], 0x7f; sete al; pop rbp; ret; 
0x0000000000401353: test rax, rax; je 0x135a; call rax; 
0x0000000000401353: test rax, rax; je 0x135a; call rax; add rsp, 8; ret; 
0x0000000000401766: test rax, rax; je 0x1778; pop rbp; mov edi, 0x609268; jmp rax; 
0x00000000004017a8: test rax, rax; je 0x17b8; pop rbp; mov edi, 0x609268; jmp rax; 
0x0000000000404bf9: test rax, rax; je 0x4c08; mov rax, qword ptr [rbp - 8]; add rsp, 0x20; pop rbp; ret; 
0x0000000000408240: xchg byte ptr [rdx], al; or eax, 6; sbb byte ptr [rax], al; add byte ptr [rax], al; push -0x3ffffff9; ret 0xffff; 
0x00000000004024e2: xchg eax, ebp; ror byte ptr [rax + 0x458aff45], 0xff; add rsp, 0x30; pop rbp; ret; 
0x0000000000402cbc: xlatb; mov rax, qword ptr [rbp - 0x18]; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000405b9f: xor al, 1; pop rbp; ret; 
0x00000000004077dc: xor al, 7; add byte ptr [rax], al; pushfq; mov dh, 0xff; call qword ptr [rax + 7]; 
0x00000000004031cc: xor dword ptr [rax + rdx + 8], esi; mov eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x000000000040499d: xor eax, 0x2048e6; mov edi, 0x406f74; call 0x1530; pop rbp; ret; 
0x0000000000404796: xor eax, eax; call 0x1570; add rsp, 0x60; pop rbp; ret; 
0x00000000004018f7: xor eax, eax; call 0x1570; pop rbp; ret; 
0x00000000004019b0: xor eax, eax; mov rsi, rcx; call 0x1480; add rsp, 0x10; pop rbp; ret; 
0x0000000000405a27: xor eax, eax; pop rbp; ret; 
0x0000000000405b9d: xor eax, eax; xor al, 1; pop rbp; ret; 
0x00000000004044f4: xor edi, edi; mov r8, rax; call 0x4420; add rsp, 0x20; pop rbp; ret; 
0x000000000040418f: xor edi, edi; mov rsi, rax; call 0x3f50; add rsp, 0x10; pop rbp; ret; 
0x000000000040454f: xor edi, edi; mov rsi, rax; call 0x4510; add rsp, 0x10; pop rbp; ret; 
0x0000000000402b72: xor edx, edx; mov edi, eax; call 0x2b20; add rsp, 0x10; pop rbp; ret; 
0x0000000000403d97: xor edx, edx; mov rcx, rax; call 0x3db0; add rsp, 0x20; pop rbp; ret; 
0x0000000000405286: xor esi, esi; mov edx, 1; call 0x52a0; add rsp, 0x10; pop rbp; ret; 
0x0000000000402d88: xorps xmm0, xmm0; movups xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], 0; pop rbp; ret; 

876 gadgets found
